# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-09-30 21:43+0900\n"
"PO-Revision-Date: 2017-09-30 21:43+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Creating-Linux-binaries.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:4
msgid "short-description: Creating universal Linux binaries ..."
msgstr "short-description: Creating universal Linux binaries\n..."

#. type: Plain text
#: Creating-Linux-binaries.md:6
msgid "# Creating Linux binaries"
msgstr "# Linux バイナリの生成"

#. type: Plain text
#: Creating-Linux-binaries.md:13
msgid ""
"Creating Linux binaries that can be downloaded and run on any distro (like ."
"dmg packages for OSX or .exe installers for Windows) has traditionally been "
"difficult. This is even more tricky if you want to use modern compilers and "
"features, which is especially desired in game development. There is still no "
"simple turn-key solution for this problem but with a bit of setup it can be "
"relatively straightforward."
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:15
msgid "## Installing system and GCC"
msgstr "## Installing system and GCC"

#. type: Plain text
#: Creating-Linux-binaries.md:23
msgid ""
"First you need to do a fresh operating system install. You can use spare "
"hardware, VirtualBox, cloud or whatever you want. Note that the distro you "
"install must be *at least as old* as the oldest release you wish to support. "
"Debian stable is usually a good choice, though immediately after its release "
"you might want to use Debian oldstable or the previous Ubuntu LTS. The "
"oldest supported version of CentOS is also a good choice."
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:27
msgid ""
"Once you have installed the system, you need to install build-dependencies "
"for GCC. In Debian-based distros this can be done with the following "
"commands:"
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:32
msgid ""
"```console $ apt-get build-dep g++ $ apt-get install pkg-config libgmp-dev "
"libmpfr-dev libmpc-dev ```"
msgstr ""
"```console\n$ apt-get build-dep g++\n$ apt-get install pkg-config libgmp-dev "
"libmpfr-dev libmpc-dev\n```"

#. type: Plain text
#: Creating-Linux-binaries.md:35
msgid ""
"Then create a `src` subdirectory in your home directory. Copy-paste the "
"following into `install_gcc.sh` and execute it."
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:38
msgid "```bash #!/bin/sh"
msgstr "```bash\n#!/bin/sh"

#. type: Plain text
#: Creating-Linux-binaries.md:41
msgid ""
"wget ftp://ftp.fu-berlin.de/unix/languages/gcc/releases/gcc-4.9.2/gcc-4.9.2."
"tar.bz2 tar xf gcc-4.9.2.tar.bz2"
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:50
#, no-wrap
msgid ""
"mkdir objdir\n"
"cd objdir\n"
"../gcc-4.9.2/configure --disable-bootstrap --prefix=${HOME}/devroot \\\n"
"                       --disable-multilib --enable-languages=c,c++\n"
"make -j 4\n"
"make install-strip\n"
"ln -s gcc ${HOME}/devroot/bin/cc\n"
"```\n"
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:52
msgid "Then finally add the following lines to your `.bashrc`."
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:58
msgid ""
"```console $ export LD_LIBRARY_PATH=${HOME}/devroot/lib $ export PATH="
"${HOME}/devroot/bin:$PATH $ export PKG_CONFIG_PATH=${HOME}/devroot/lib/"
"pkgconfig ```"
msgstr ""
"```console\n$ export LD_LIBRARY_PATH=${HOME}/devroot/lib\n$ export PATH="
"${HOME}/devroot/bin:$PATH\n$ export PKG_CONFIG_PATH=${HOME}/devroot/lib/"
"pkgconfig\n```"

#. type: Plain text
#: Creating-Linux-binaries.md:60
msgid "Log out and back in and now your build environment is ready to use."
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:62
msgid "## Adding other tools"
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:67
msgid ""
"Old distros might have too old versions of some tools. For Meson this could "
"nclude Python 3 and Ninja. If this is the case you need to download, build "
"and install new versions into `~/devroot` in the usual way."
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:69
msgid "## Adding dependencies"
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:80
msgid ""
"You want to embed and statically link every dependency you can (especially C+"
"+ dependencies). Meson's [Wrap package manager](Wrap-dependency-system-"
"manual.md) might be of use here. This is equivalent to what you would do on "
"Windows, OSX, Android etc. Sometimes static linking is not possible. In "
"these cases you need to copy the .so files inside your package. Let's use "
"SDL2 as an example. First we download and install it as usual giving it our "
"custom install prefix (that is, `./configure --prefix=${HOME}/devroot`). "
"This makes Meson's dependency detector pick it up automatically."
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:82
msgid "## Building and installing"
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:89
msgid ""
"Building happens in much the same way as normally. There are just two things "
"to note. First, you must tell GCC to link the C++ standard library "
"statically. If you don't then your app is guaranteed to break as different "
"distros have binary-incompatible C++ libraries. The second thing is that you "
"need to point your install prefix to some empty staging area. Here's the "
"meson command to do that:"
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:93
msgid ""
"```console $ LDFLAGS=-static-libstdc++ meson --prefix=/tmp/myapp <other "
"args> ```"
msgstr ""
"```console\n$ LDFLAGS=-static-libstdc++ meson --prefix=/tmp/myapp <other "
"args>\n```"

#. type: Plain text
#: Creating-Linux-binaries.md:103
msgid ""
"The aim is to put the executable in `/tmp/myapp/bin` and shared libraries to "
"`/tmp/myapp/lib`. The next thing you need is the embedder. It takes your "
"dependencies (in this case only `libSDL2-2.0.so.0`) and copies them in the "
"lib directory. Depending on your use case you can either copy the files by "
"hand or write a script that parses the output of `ldd binary_file`. Be sure "
"not to copy system libraries (`libc`, `libpthread`, `libm` etc). For an "
"example, see the [sample project](https://github.com/jpakkane/meson/tree/"
"master/manual%20tests/4%20standalone%20binaries)."
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:105
msgid "Make the script run during install with this:"
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:109
msgid "```meson meson.add_install_script('linux_bundler.sh')  ```"
msgstr "```meson\nmeson.add_install_script('linux_bundler.sh') \n```"

#. type: Plain text
#: Creating-Linux-binaries.md:111
msgid "## Final steps"
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:117
msgid ""
"If you try to run the program now it will most likely fail to start or "
"crashes. The reason for this is that the system does not know that the "
"executable needs libraries from the `lib` directory. The solution for this "
"is a simple wrapper script. Create a script called `myapp.sh` with the "
"following content:"
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:120
msgid "```bash #!/bin/bash"
msgstr "```bash\n#!/bin/bash"

#. type: Plain text
#: Creating-Linux-binaries.md:125
msgid "cd \"${0%/*}\" export LD_LIBRARY_PATH=\"`pwd`/lib\" bin/myapp ```"
msgstr "cd \"${0%/*}\"\nexport LD_LIBRARY_PATH=\"`pwd`/lib\"\nbin/myapp\n```"

#. type: Plain text
#: Creating-Linux-binaries.md:127
msgid "Install it with this Meson snippet:"
msgstr ""

#. type: Plain text
#: Creating-Linux-binaries.md:131
msgid "```meson install_data('myapp.sh', install_dir : '.')  ```"
msgstr "```meson\ninstall_data('myapp.sh', install_dir : '.') \n```"

#. type: Plain text
#: Creating-Linux-binaries.md:134
msgid ""
"And now you are done. Zip up your `/tmp/myapp` directory and you have a "
"working binary ready for deployment. To run the program, just unzip the file "
"and run `myapp.sh`."
msgstr ""
