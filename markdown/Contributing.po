# Japanese translations for PACKAGE package
# Copyright (C) 2018 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-01-19 14:13+0900\n"
"PO-Revision-Date: 2018-01-19 14:13+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Contributing.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Contributing.md:4
msgid "short-description: Contributing to Meson ..."
msgstr ""

#. type: Plain text
#: Contributing.md:6
msgid "# Contributing to Meson"
msgstr ""

#. type: Plain text
#: Contributing.md:11
msgid ""
"A large fraction of Meson is contributed by people outside the core team. "
"This documentation explains some of the design rationales of Meson as well "
"as how to create and submit your patches for inclusion to Meson."
msgstr ""

#. type: Plain text
#: Contributing.md:13
msgid "Thank you for your interest in participating to the development."
msgstr ""

#. type: Plain text
#: Contributing.md:15
msgid "## Submitting patches"
msgstr ""

#. type: Plain text
#: Contributing.md:20
msgid ""
"All changes must be submitted as [pull requests to Github](https://github."
"com/mesonbuild/meson/pulls). This causes them to be run through the CI "
"system. All submissions must pass a full CI test run before they are even "
"considered for submission."
msgstr ""

#. type: Plain text
#: Contributing.md:22
msgid "## Tests"
msgstr ""

#. type: Plain text
#: Contributing.md:27
msgid ""
"All new features must come with automatic tests that throughly prove that "
"the feature is working as expected. Similarly bug fixes must come with a "
"unit test that demonstrates the bug, proves that it has been fixed and "
"prevents the feature from breaking in the future."
msgstr ""

#. type: Plain text
#: Contributing.md:34
msgid ""
"Sometimes it is difficult to create a unit test for a given bug. If this is "
"the case, note this in your pull request. We may permit bug fix merge "
"requests in these cases. This is done on a case by case basis. Sometimes it "
"may be easier to write the test than convince the maintainers that one is "
"not needed. Exercise judgment and ask for help in problematic cases."
msgstr ""

#. type: Plain text
#: Contributing.md:39
msgid ""
"The tests are split into two different parts: unit tests and full project "
"tests. To run all tests, execute `./run_tests.py`. Unit tests can be run "
"with `./run_unittests.py` and project tests with `./run_project_tests.py`."
msgstr ""

#. type: Plain text
#: Contributing.md:45
msgid ""
"Each project test is a standalone project that can be compiled on its own. "
"They are all in `test cases` subdirectory. The simplest way to run a single "
"project test is to do something like `./meson.py test\\ cases/common/1\\ "
"trivial builddir`. The one exception to this is `test cases/unit` directory "
"discussed below."
msgstr ""

#. type: Plain text
#: Contributing.md:54
msgid ""
"The test cases in the `common` subdirectory are meant to be run always for "
"all backends. They should only depend on C and C++, without any external "
"dependencies such as libraries. Tests that require those are in the `test "
"cases/frameworks` directory. If there is a need for an external program in "
"the common directory, such as a code generator, it should be implemented as "
"a Python script. The goal of test projects is also to provide sample "
"projects that end users can use as a base for their own projects."
msgstr ""

#. type: Plain text
#: Contributing.md:62
msgid ""
"All project tests follow the same pattern: they are compiled, tests are run "
"and finally install is run. Passing means that building and tests succeed "
"and installed files match the `installed_files.txt` file in the test's "
"source root. Any tests that require more thorough analysis, such as checking "
"that certain compiler arguments can be found in the command line or that the "
"generated pkg-config files actually work should be done with a unit test."
msgstr ""

#. type: Plain text
#: Contributing.md:65
msgid ""
"Projects needed by unit tests are in the `test cases/unit` subdirectory. "
"They are not run as part of `./run_project_tests.py`."
msgstr ""

#. type: Plain text
#: Contributing.md:67
msgid "## Documentation"
msgstr ""

#. type: Plain text
#: Contributing.md:73
msgid ""
"The `docs` directory contains the full documentation that will be used to "
"generate [the Meson web site](http://mesonbuild.com). Every change in "
"functionality must change the documentation pages. In most cases this means "
"updating the reference documentation page but bigger changes might need "
"changes in other documentation, too."
msgstr ""

#. type: Plain text
#: Contributing.md:78
msgid ""
"All new functionality needs to have a mention in the release notes. These "
"features should be written in standalone files in the `docs/markdown/"
"snippets` directory. The release manager will combine them into one page "
"when doing the release."
msgstr ""

#. type: Plain text
#: Contributing.md:80
msgid "## Python Coding style"
msgstr ""

#. type: Plain text
#: Contributing.md:83
msgid ""
"Meson follows the basic Python coding style. Additional rules are the "
"following:"
msgstr ""

#. type: Bullet: '- '
#: Contributing.md:89
msgid "indent 4 spaces, no tabs ever"
msgstr ""

#. type: Bullet: '- '
#: Contributing.md:89
msgid "indent meson.build files with two spaces"
msgstr ""

#. type: Bullet: '- '
#: Contributing.md:89
msgid "try to keep the code as simple as possible"
msgstr ""

#. type: Bullet: '- '
#: Contributing.md:89
msgid ""
"contact the mailing list before embarking on large scale projects to avoid "
"wasted effort"
msgstr ""

#. type: Plain text
#: Contributing.md:92
msgid ""
"Meson uses Flake8 for style guide enforcement. The Flake8 options for the "
"project are contained in setup.cfg."
msgstr ""

#. type: Plain text
#: Contributing.md:94
msgid "To run Flake8 on your local clone of Meson:"
msgstr ""

#. type: Plain text
#: Contributing.md:100
msgid "```console $ python3 -m pip install flake8 $ cd meson $ flake8 ```"
msgstr ""

#. type: Plain text
#: Contributing.md:102
msgid "## C/C++ coding style"
msgstr ""

#. type: Plain text
#: Contributing.md:105
msgid ""
"Meson has a bunch of test code in several languages. The rules for those are "
"simple."
msgstr ""

#. type: Plain text
#: Contributing.md:108
msgid ""
"- indent 4 spaces, no tabs ever - brace always on the same line as if/for/"
"else/function definition"
msgstr ""

#. type: Plain text
#: Contributing.md:112
msgid "## External dependencies"
msgstr ""

#. type: Plain text
#: Contributing.md:121
msgid ""
"The goal of Meson is to be as easily usable as possible. The user experience "
"should be \"get Python3 and Ninja, run\", even on Windows. Unfortunately "
"this means that we can't have dependencies on projects outside of Python's "
"standard library. This applies only to core functionality, though. For "
"additional helper programs etc the use of external dependencies may be ok. "
"If you feel that you are dealing with this kind of case, please contact the "
"developers first with your use case."
msgstr ""

#. type: Plain text
#: Contributing.md:123
msgid "## Turing completeness"
msgstr ""

#. type: Plain text
#: Contributing.md:129
msgid ""
"The main design principle of Meson is that the definition language is not "
"Turing complete. Any change that would make Meson Turing complete is "
"automatically rejected. In practice this means that defining your own "
"functions inside `meson.build` files and generalised loops will not be added "
"to the language."
msgstr ""

#. type: Plain text
#: Contributing.md:131
msgid "## Do I need to sign a CLA in order to contribute?"
msgstr ""

#. type: Plain text
#: Contributing.md:133
msgid "No you don't. All contributions are welcome."
msgstr ""

#. type: Plain text
#: Contributing.md:135
msgid "## No lingering state"
msgstr ""

#. type: Plain text
#: Contributing.md:140
msgid ""
"Meson operates in much the same way as functional programming languages. It "
"has inputs, which include `meson.build` files, values of options, compilers "
"and so on. These are passed to a function, which generates output build "
"definition. This function is pure, which means that:"
msgstr ""

#. type: Bullet: ' - '
#: Contributing.md:143
msgid "for any given input the output is always the same"
msgstr ""

#. type: Bullet: ' - '
#: Contributing.md:143
msgid ""
"running Meson twice in a row _always_ produce the same output in both runs"
msgstr ""

#. type: Plain text
#: Contributing.md:148
msgid ""
"The latter one is important, because it enforces that there is no way for "
"\"secret state\" to pass between consecutive invocations of Meson. This is "
"the reason why, for example, there is no `set_option` function even though "
"there is a `get_option` one."
msgstr ""

#. type: Plain text
#: Contributing.md:152
msgid ""
"If this were not the case, we could never know if the build output is "
"\"stable\". For example suppose there were a `set_option` function and a "
"boolean variable `flipflop`. Then you could do this:"
msgstr ""

#. type: Plain text
#: Contributing.md:156
msgid "```meson set_option('flipflop', not get_option('flipflop'))  ```"
msgstr ""

#. type: Plain text
#: Contributing.md:160
msgid ""
"This piece of code would never converge. Every Meson run would change the "
"value of the option and thus the output you get out of this build definition "
"would be random."
msgstr ""

#. type: Plain text
#: Contributing.md:162
msgid ""
"Meson does not permit this by forbidding these sorts of covert channels."
msgstr ""

#. type: Plain text
#: Contributing.md:168
msgid ""
"There is one exception to this rule. Users can call into external commands "
"with `run_command`. If the output of that command does not behave like a "
"pure function, this problem arises. Meson does not try to guard against this "
"case, it is the responsibility of the user to make sure the commands they "
"run behave like pure functions."
msgstr ""

#. type: Plain text
#: Contributing.md:170
msgid "## Environment variables"
msgstr ""

#. type: Plain text
#: Contributing.md:175
msgid ""
"Environment variables are like global variables, except that they are also "
"hidden by default. Envvars should be avoided whenever possible, all "
"functionality should be exposed in better ways such as command line switches."
msgstr ""
