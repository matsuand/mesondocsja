# Japanese translations for PACKAGE package
# Copyright (C) 2018 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-09-04 12:03+0900\n"
"PO-Revision-Date: 2018-09-04 12:03+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Release-notes-for-0.46.0.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:5
msgid "title: Release 0.46 short-description: Release notes for 0.46 ..."
msgstr ""
"title: リリース 0.46\n"
"short-description: Release notes for 0.46\n..."

#. type: Plain text
#: Release-notes-for-0.46.0.md:7
msgid "# New features"
msgstr "# 新機能"

#. type: Plain text
#: Release-notes-for-0.46.0.md:9
msgid "## Allow early return from a script"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:14
msgid ""
"Added the function `subdir_done()`. Its invocation exits the current script "
"at the point of invocation. All previously invoked build targets and "
"commands are build/executed. All following ones are ignored. If the current "
"script was invoked via `subdir()` the parent script continues normally."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:16
msgid "## Log output slightly changed"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:20
msgid ""
"The format of some human-readable diagnostic messages has changed in minor "
"ways. In case you are parsing these messages, you may need to adjust your "
"code."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:22
msgid "## ARM compiler for C and CPP"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:29
msgid ""
"Cross-compilation is now supported for ARM targets using ARM compiler - "
"ARMCC.  The current implementation does not support shareable libraries.  "
"The default extension of the output is .axf.  The environment path should be "
"set properly for the ARM compiler executables.  The '--cpu' option with the "
"appropriate target type should be mentioned in the cross file as shown in "
"the snippet below."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:34
#, no-wrap
msgid ""
"```ini\n"
"[properties]\n"
"c_args      = ['--cpu=Cortex-M0plus']\n"
"cpp_args    = ['--cpu=Cortex-M0plus']\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:36
msgid "```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:38
msgid "## Building both shared and static libraries"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:44
msgid ""
"A new function `both_libraries()` has been added to build both shared and "
"static libraries at the same time. Source files will be compiled only once "
"and object files will be reused to build both shared and static libraries, "
"unless `b_staticpic` user option or `pic:` keyword argument are set to false "
"in which case sources will be compiled twice."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:46
msgid "The returned `buildtarget` object always represents the shared library."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:48
msgid "## Compiler object can now be passed to run_command()"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:53
msgid ""
"This can be used to run the current compiler with the specified arguments to "
"obtain additional information from it.  One of the use cases is to get the "
"location of development files for the GCC plugins:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:59
msgid ""
"```meson cc = meson.get_compiler('c')  result = run_command(cc, '-print-file-"
"name=plugin')  plugin_dev_path = result.stdout().strip()  ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:61
msgid "## declare_dependency() now supports `link_whole:`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:64
msgid ""
"`declare_dependency()` now supports the `link_whole:` keyword argument which "
"transparently works for build targets which use that dependency."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:66
msgid "## Old command names are now errors"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:72
msgid ""
"The old executable names `mesonintrospect`, `mesonconf`, `mesonrewriter` and "
"`mesontest` have been deprecated for a long time. Starting from this version "
"they no longer do anything but instead always error out. All functionality "
"is available as subcommands in the main `meson` binary."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:74
msgid "## Meson and meson configure now accept the same arguments"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:79
msgid ""
"Previously meson required that builtin arguments (like prefix) be passed as "
"`--prefix` to `meson` and `-Dprefix` to `meson configure`. `meson` now "
"accepts -D form like `meson configure` has. `meson configure` also accepts "
"the `--prefix` form, like `meson` has."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:81
msgid "## Recursively extract objects"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:87
msgid ""
"The `recursive:` keyword argument has been added to `extract_all_objects()`. "
"When set to `true` it will also return objects passed to the `objects:` "
"argument of this target. By default only objects built for this target are "
"returned to maintain backward compatibility with previous versions. The "
"default will eventually be changed to `true` in a future version."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:92
msgid ""
"```meson lib1 = static_library('a', 'source.c', objects : 'prebuilt.o')  "
"lib2 = static_library('b', objects : lib1.extract_all_objects(recursive : "
"true))  ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:94
msgid "## Can override find_program()"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:98
msgid ""
"It is now possible to override the result of `find_program` to point to a "
"custom program you want. The overriding is global and applies to every "
"subproject from there on. Here is how you would use it."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:100
msgid "In master project"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:104
msgid "```meson subproject('mydep')  ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:106
msgid "In the called subproject:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:111
msgid ""
"```meson prog = find_program('my_custom_script')  meson."
"override_find_program('mycodegen', prog)  ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:113
msgid "In master project (or, in fact, any subproject):"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:117
msgid "```meson genprog = find_program('mycodegen')  ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:120
msgid ""
"Now `genprog` points to the custom script. If the dependency had come from "
"the system, then it would point to the system version."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:123
msgid ""
"You can also use the return value of `configure_file()` to override a "
"program in the same way as above:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:130
#, no-wrap
msgid ""
"```meson\n"
"prog_script = configure_file(input : 'script.sh.in',\n"
"                             output : 'script.sh',\n"
"                             configuration : cdata)\n"
"meson.override_find_program('mycodegen', prog_script)\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:132
msgid "## New functions: has_link_argument() and friends"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:135
msgid ""
"A new set of methods has been added to [compiler objects](Reference-manual."
"md#compiler-object)  to test if the linker supports given arguments."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:140
msgid ""
"- `has_link_argument()` - `has_multi_link_arguments()` - "
"`get_supported_link_arguments()` - `first_supported_link_argument()`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:142
msgid "## \"meson help\" now shows command line help"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:147
msgid ""
"Command line parsing is now less surprising. \"meson help\" is now "
"equivalent to \"meson --help\" and \"meson help <subcommand>\" is equivalent "
"to \"meson <subcommand> --help\", instead of creating a build directory "
"called \"help\" in these cases."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:149
msgid "## Autogeneration of simple meson.build files"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:156
msgid ""
"A feature to generate a meson.build file compiling given C/C++ source files "
"into a single executable has been added to \"meson init\". By default, it "
"will take all recognizable source files in the current directory.  You can "
"also specify a list of dependencies with the -d flag and automatically "
"invoke a build with the -b flag to check if the code builds with those "
"dependencies."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:158
msgid "For example,"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:162
msgid "```meson meson init -fbd sdl2,gl ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:167
msgid ""
"will look for C or C++ files in the current directory, generate a meson."
"build for them with the dependencies of sdl2 and gl and immediately try to "
"build it, overwriting any previous meson.build and build directory."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:169
msgid "## install_data() supports `rename:`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:172
msgid ""
"The `rename:` keyword argument is used to change names of the installed "
"files. Here's how you install and rename the following files:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:175
msgid ""
"- `file1.txt` into `share/myapp/dir1/data.txt` - `file2.txt` into `share/"
"myapp/dir2/data.txt`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:181
#, no-wrap
msgid ""
"```meson\n"
"install_data(['file1.txt', 'file2.txt'],\n"
"             rename : ['dir1/data.txt', 'dir2/data.txt'],\n"
"             install_dir : 'share/myapp')\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:183
msgid "## Support for lcc compiler for e2k (Elbrus) architecture"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:187
msgid ""
"In this version, a support for lcc compiler for Elbrus processors based on "
"[e2k microarchitecture](https://en.wikipedia.org/wiki/Elbrus_2000)  has been "
"added."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:192
msgid ""
"Examples of such CPUs: * [Elbrus-8S](https://en.wikipedia.org/wiki/"
"Elbrus-8S); * Elbrus-4S; * [Elbrus-2S+](https://en.wikipedia.org/wiki/"
"Elbrus-2S%2B)."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:195
msgid ""
"Such compiler have a similar behavior as gcc (basic option compatibility), "
"but, in is not strictly compatible with gcc as of current version."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:203
msgid ""
"Major differences as of version 1.21.22: * it does not support LTO and PCH; "
"* it suffers from the same dependency file creation error as icc; * it has "
"minor differences in output, especially version output; * it differently "
"reacts to lchmod() detection; * some backend messages are produced in ru_RU."
"KOI8-R even if LANG=C; * its preprocessor treats some characters differently."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:205
msgid "So every noted difference is properly handled now in meson."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:207
msgid "## String escape character sequence update"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:213
msgid ""
"Single-quoted strings in meson have been taught the same set of escape "
"sequences as in Python. It is therefore now possible to use arbitrary bytes "
"in strings, like for example `NUL` (`\\0`) and other ASCII control "
"characters. See the chapter about [*Strings* in *Syntax*](Syntax.md#strings) "
"for more details."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:218
msgid ""
"Potential backwards compatibility issue: Any valid escape sequence according "
"to the new rules will be interpreted as an escape sequence instead of the "
"literal characters. Previously only the following escape sequences were "
"supported in single-quote strings: `\\'`, `\\\\` and `\\n`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:221
msgid ""
"Note that the behaviour of triple-quoted (multiline) strings has not "
"changed.  They behave like raw strings and do not support any escape "
"sequences."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:223
msgid "## New `forcefallback` wrap mode"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:227
msgid ""
"A new wrap mode was added, `--wrap-mode=forcefallback`. When this is set, "
"dependencies for which a fallback was provided will always use it, even if "
"an external dependency exists and satisfies the version requirements."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:229
msgid "## Relaxing of target name requirements"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:234
msgid ""
"In earlier versions of Meson you could only have one target of a given name "
"for each type.  For example you could not have two executables named `foo`. "
"This requirement is now relaxed so that you can have multiple targets with "
"the same name, as long as they are in different subdirectories."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:237
msgid ""
"Note that projects that have multiple targets with the same name can not be "
"built with the `flat` layout or any backend that writes outputs in the same "
"directory."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:239
msgid "## Addition of OpenMP dependency"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:244
msgid ""
"An OpenMP dependency (`openmp`) has been added that encapsulates the various "
"flags used by compilers to enable OpenMP and checks for the existence of the "
"`omp.h` header. The `language` keyword may be passed to force the use of a "
"specific compiler for the checks."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:246
msgid "## Added new partial_dependency method to dependencies and libraries"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:250
msgid ""
"It is now possible to use only part of a dependency in a target. This "
"allows, for example, to only use headers with convenience libraries to avoid "
"linking to the same library multiple times."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:253
msgid "```meson dep = dependency('xcb')"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:259
#, no-wrap
msgid ""
"helper = static_library(\n"
"  'helper',\n"
"  ['helper1.c', 'helper2.c'],\n"
"  dependencies : dep.partial_dependency(includes : true),\n"
"]\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:266
#, no-wrap
msgid ""
"final = shared_library(\n"
"  'final',\n"
"  ['final.c'],\n"
"  dependencyes : dep,\n"
")\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:269
msgid ""
"A partial dependency will have the same name version as the full dependency "
"it is derived from, as well as any values requested."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:271
msgid "## Improved generation of pkg-config files for static only libraries."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:274
msgid ""
"Previously pkg-config files generated by the pkgconfig modules for static "
"libraries with dependencies could only be used in a dependencies with "
"`static: true`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:278
msgid ""
"Now the generated file contains the needed dependencies libraries directly "
"within `Requires` and `Libs` for build static libraries passed via the "
"`libraries` keyword argument."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:283
msgid ""
"Projects that install both a static and a shared version of a library should "
"use the result of [`both_libraries()`](Reference-manual.md#both_libraries) "
"to the pkg-config file generator or use [`configure_file()`](Reference-"
"manual.md#configure_file)  for more complicated setups."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:285
msgid "## Improvements to pkgconfig module"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:292
msgid ""
"A `StaticLibrary` or `SharedLibrary` object can optionally be passed as "
"first positional argument of the `generate()` method. If one is provided a "
"default value will be provided for all required fields of the pc file: - "
"`install_dir` is set to `pkgconfig` folder in the same location than the "
"provided library.  - `description` is set to the project's name followed by "
"the library's name.  - `name` is set to the library's name."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:294
msgid "Generating a .pc file is now as simple as:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:298
msgid "``` pkgconfig.generate(mylib)  ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:300
msgid "## pkgconfig.generate() requires parameters non-string arguments"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:304
msgid ""
"`pkgconfig.generate()` `requires:` and `requires_private:` keyword arguments "
"now accept pkgconfig-dependencies and libraries that pkgconfig-files were "
"generated for."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:306
msgid "## Generic python module"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:311
msgid ""
"Meson now has is a revamped and generic (python 2 and 3) version of the "
"python3 module. With [this new interface](Python-module.md), projects can "
"now fully specify the version of python they want to build against / install "
"sources to, and can do so against multiple major or minor versions in "
"parallel."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:313
msgid "## test() now supports the `depends:` keyword argument"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.46.0.md:316
msgid ""
"Build targets and custom targets can be listed in the `depends:` keyword "
"argument of test function. These targets will be built before test is run "
"even if they have `build_by_default : false`."
msgstr ""
