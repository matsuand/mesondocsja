# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-09-12 23:32+0900\n"
"PO-Revision-Date: 2017-09-30 21:44+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Quick-guide.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Quick-guide.md:5
msgid ""
"title: Quick guide short-description: Guide to get started using meson ..."
msgstr ""
"title: クィックガイド\n"
"short-description: Guide to get started using meson\n"
"..."

#. type: Plain text
#: Quick-guide.md:7
msgid "# Using Meson"
msgstr "# Meson の利用"

#. type: Plain text
#: Quick-guide.md:11
msgid ""
"Meson has been designed to be as easy to use as possible. This page outlines "
"the basic use cases. For more advanced cases refer to Meson's command line "
"help which is accessible with the command `meson --help`."
msgstr ""
"Meson はできるかぎり扱いやすいように設計されています。このページでは、基本的"
"な利用方法について示します。さらに詳しい利用方法については、コマンドラインか"
"ら `meson --help` を実行して、表示されるヘルプを参照してください。"

#. type: Plain text
#: Quick-guide.md:13
#, no-wrap
msgid ""
"Requirements\n"
"--\n"
msgstr ""
"システム要件\n"
"--\n"

#. type: Plain text
#: Quick-guide.md:16
msgid "Meson has two main dependencies."
msgstr "Meson には主に 2 つの依存パッケージがあります。"

#. type: Bullet: '* '
#: Quick-guide.md:19
msgid "[Python 3](https://python.org)"
msgstr ""

#. type: Bullet: '* '
#: Quick-guide.md:19
msgid "[Ninja](https://github.com/ninja-build/ninja/)"
msgstr ""

#. type: Plain text
#: Quick-guide.md:22
msgid ""
"Ninja is only needed if you use the Ninja backend. Meson can also generate "
"native VS and XCode project files."
msgstr ""
"Ninja はバックエンドとして利用する場合にのみ必要となります。Meson では、ネイ"
"ティブの VS や XCode プロジェクトファイルを生成することもできます。"

#. type: Plain text
#: Quick-guide.md:24
msgid "On Ubuntu these can be easily installed with the following command:"
msgstr ""
"Ubuntu の場合は、以下のコマンドにより簡単にインストールすることができます。"

#. type: Plain text
#: Quick-guide.md:28
#, fuzzy
msgid "```console $ sudo apt-get install python3 python3-pip ninja-build ```"
msgstr "```console\n$ sudo apt-get install python3 python3-pip ninja-build\n```"

#. type: Plain text
#: Quick-guide.md:30
msgid "The best way to get Meson is to `pip install` it for your user"
msgstr ""
"Meson を入手する最良の方法は、利用中のログインユーザーにおいて `pip install` "
"を実行することです。"

#. type: Plain text
#: Quick-guide.md:34
msgid "```console $ pip3 install --user meson ```"
msgstr ""
"```console\n"
"$ pip3 install --user meson\n"
"```"

#. type: Plain text
#: Quick-guide.md:38
msgid ""
"You can also use Meson as packaged by your distro, but beware that due to "
"our frequent release cycle and development speed this version might be out "
"of date."
msgstr ""
"ディストリビューションが提供する Meson を用いることもできます。ただし Meson "
"のリリースサイクルや開発スピードを考えると、そのパッケージバージョンは古い場"
"合があるため注意してください。"

#. type: Plain text
#: Quick-guide.md:41
msgid ""
"Another option is to clone the git repository and run it directly from there."
msgstr ""
"別の方法として git リポジトリをクローンして、直接そこから実行する方法もありま"
"す。"

#. type: Plain text
#: Quick-guide.md:43
#, no-wrap
msgid ""
"Compiling a Meson project\n"
"--\n"
msgstr ""
"Meson プロジェクトのコンパイル\n"
"--\n"

#. type: Plain text
#: Quick-guide.md:47
msgid ""
"The most common use case of Meson is compiling code on a code base you are "
"working on. The steps to take are very simple."
msgstr ""

#. type: Plain text
#: Quick-guide.md:54
msgid ""
"```console $ cd /path/to/source/root $ meson builddir && cd builddir $ ninja "
"$ ninja test ```"
msgstr ""
"```console\n"
"$ cd /path/to/source/root\n"
"$ meson builddir && cd builddir\n"
"$ ninja \n"
"$ ninja test\n"
"```"

#. type: Plain text
#: Quick-guide.md:61
msgid ""
"The only thing to note is that you need to create a separate build "
"directory. Meson will not allow you to build source code inside your source "
"tree. All build artifacts are stored in the build directory. This allows you "
"to have multiple build trees with different configurations at the same time. "
"This way generated files are not added into revision control by accident."
msgstr ""

#. type: Plain text
#: Quick-guide.md:70
msgid ""
"To recompile after code changes, just type `ninja`. The build command is "
"always the same. You can do arbitrary changes to source code and build "
"system files and Meson will detect those and will do the right thing. If you "
"want to build optimized binaries, just use the argument `--"
"buildtype=debugoptimized` when running Meson. It is recommended that you "
"keep one build directory for unoptimized builds and one for optimized ones. "
"To compile any given configuration, just go into the corresponding build "
"directory and run `ninja`."
msgstr ""

#. type: Plain text
#: Quick-guide.md:75
msgid ""
"Meson will automatically add compiler flags to enable debug information and "
"compiler warnings (i.e. `-g` and `-Wall`). This means the user does not have "
"to deal with them and can instead focus on coding."
msgstr ""

#. type: Plain text
#: Quick-guide.md:77
#, no-wrap
msgid ""
"Using Meson as a distro packager\n"
"--\n"
msgstr ""
"ディストリビューションのパッケージャーとしての Meson の利用\n"
"--\n"

#. type: Plain text
#: Quick-guide.md:82
msgid ""
"Distro packagers usually want total control on the build flags used. Meson "
"supports this use case natively. The commands needed to build and install "
"Meson projects are the following."
msgstr ""

#. type: Plain text
#: Quick-guide.md:90
msgid ""
"```console $ cd /path/to/source/root $ CFLAGS=... CXXFLAGS=... LDFLAGS=.. "
"meson --prefix /usr --buildtype=plain builddir $ ninja -v -C builddir $ "
"ninja -C builddir test $ DESTDIR=/path/to/staging/root ninja -C builddir "
"install ```"
msgstr ""
"```console\n"
"$ cd /path/to/source/root\n"
"$ CFLAGS=... CXXFLAGS=... LDFLAGS=.. meson --prefix /usr --buildtype=plain "
"builddir\n"
"$ ninja -v -C builddir\n"
"$ ninja -C builddir test\n"
"$ DESTDIR=/path/to/staging/root ninja -C builddir install\n"
"```"

#. type: Plain text
#: Quick-guide.md:94
msgid ""
"The command line switch `--buildtype=plain` tells Meson not to add its own "
"flags to the command line. This gives the packager total control on used "
"flags."
msgstr ""

#. type: Plain text
#: Quick-guide.md:98
msgid ""
"This is very similar to other build systems. The only difference is that the "
"`DESTDIR` variable is passed as an environment variable rather than as an "
"argument to `ninja install`."
msgstr ""

#. type: Plain text
#: Quick-guide.md:103
msgid ""
"As distro builds happen always from scratch, you might consider enabling "
"[unity builds](Unity-builds.md) on your packages because they are faster and "
"produce better code. However there are many projects that do not build with "
"unity builds enabled so the decision to use unity builds must be done by the "
"packager on a case by case basis."
msgstr ""
