# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-01-19 14:05+0900\n"
"PO-Revision-Date: 2017-09-30 21:44+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Using-wraptool.md:2
msgid "# Using wraptool"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:9
msgid ""
"Wraptool is a helper tool that allows you to manage your source dependencies "
"using the WrapDB database. It gives you all things you would expect, such as "
"installing and updating dependencies. The wrap tool works on all platforms, "
"the only limitation is that the wrap definition works on your target "
"platform. If you find some Wraps that don't work, please file bugs or, even "
"better, patches."
msgstr ""

#. type: Plain text
#: Using-wraptool.md:13
msgid ""
"All code examples here assume that you are running the commands in your top "
"level source directory. Lines that start with the `$` mark are commands to "
"type."
msgstr ""

#. type: Plain text
#: Using-wraptool.md:15
msgid "## Simple querying"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:18
msgid ""
"The simplest operation to do is to query the list of packages available. To "
"list them all issue the following command:"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:32
#, no-wrap
msgid ""
"    $ wraptool list\n"
"    box2d\n"
"    enet\n"
"    gtest\n"
"    libjpeg\n"
"    liblzma\n"
"    libpng\n"
"    libxml2\n"
"    lua\n"
"    ogg\n"
"    sqlite\n"
"    vorbis\n"
"    zlib\n"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:35
msgid ""
"Usually you want to search for a specific package. This can be done with the "
"`search` command:"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:38
#, no-wrap
msgid ""
"    $ wraptool search jpeg\n"
"    libjpeg\n"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:41
msgid ""
"To determine which versions of libjpeg are available to install, issue the "
"`info` command:"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:45
#, no-wrap
msgid ""
"    $ wraptool info libjpeg\n"
"    Available versions of libjpeg:\n"
"      9a 2\n"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:50
msgid ""
"The first number is the upstream release version, in this case `9a`. The "
"second number is the Wrap revision number. They don't relate to anything in "
"particular, but larger numbers imply newer releases. You should always use "
"the newest available release."
msgstr ""

#. type: Plain text
#: Using-wraptool.md:52
msgid "## Installing dependencies"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:56
msgid ""
"Installing dependencies is just as straightforward. First just create the "
"`subprojects` directory at the top of your source tree and issue the install "
"command."
msgstr ""

#. type: Plain text
#: Using-wraptool.md:59
#, no-wrap
msgid ""
"    $ wraptool install libjpeg\n"
"    Installed libjpeg branch 9a revision 2\n"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:62
msgid ""
"Now you can issue a `subproject('libjpeg')` in your `meson.build` file to "
"use it."
msgstr ""

#. type: Plain text
#: Using-wraptool.md:64
msgid ""
"To check if your projects are up to date you can issue the `status` command."
msgstr ""

#. type: Plain text
#: Using-wraptool.md:69
#, no-wrap
msgid ""
"    $ wraptool status\n"
"    Subproject status\n"
"     libjpeg up to date. Branch 9a, revision 2.\n"
"     zlib not up to date. Have 1.2.8 2, but 1.2.8 4 is available.\n"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:72
msgid ""
"In this case `zlib` has a newer release available. Updating it is "
"straightforward:"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:75
#, no-wrap
msgid ""
"    $ wraptool update zlib\n"
"    Updated zlib to branch 1.2.8 revision 4\n"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:79
msgid ""
"Wraptool can do other things besides these. Documentation for these can be "
"found in the command line help, which can be accessed by `wraptool --help`."
msgstr ""

#. type: Plain text
#: Using-wraptool.md:81
msgid "## Promoting dependencies"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:86
msgid ""
"Meson will only search for subprojects from the top level `subprojects` "
"directory. If you have subprojects that themselves have subprojects, you "
"must transfer them to the top level. This can be done by going to your "
"source root and issuing a promotion command."
msgstr ""

#. type: Plain text
#: Using-wraptool.md:88
#, no-wrap
msgid "    meson wrap promote projname\n"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:91
msgid ""
"This will cause Meson to go through your entire project tree, find an "
"embedded subproject and copy it to the top level."
msgstr ""

#. type: Plain text
#: Using-wraptool.md:96
msgid ""
"If there are multiple embedded copies of a subproject, Meson will not try to "
"guess which one you want. Instead it will print all the possibilities. You "
"can then manually select which one to promote by writing it out fully."
msgstr ""

#. type: Plain text
#: Using-wraptool.md:98
#, no-wrap
msgid "    meson wrap promote subprojects/s1/subprojects/projname\n"
msgstr ""

#. type: Plain text
#: Using-wraptool.md:99
msgid "This functionality was added in Meson release 0.45.0."
msgstr ""
