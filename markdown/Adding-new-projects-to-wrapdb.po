# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-09-30 21:43+0900\n"
"PO-Revision-Date: 2017-09-30 21:43+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:2
msgid "# Adding new projects to wrap"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:6
#, no-wrap
msgid ""
"**If you don't have permissions to do something on this page, please\n"
"  open issue against https://github.com/mesonbuild/wrapweb/issues to\n"
"  let us know that you want to start new project.**\n"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:8
msgid "## Overview"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:15
msgid ""
"The wrap provider service is a simple web service that makes it easy to "
"download build definitions for projects. It works in much the same way as "
"Debian: we take the unaltered upstream source package and add a new build "
"system to it as a patch. These build systems are stored as Git repositories "
"on GitHub. They only contain build definition files. You may also think of "
"them as an overlay to upstream source."
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:17
msgid "## Creator script"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:22
msgid ""
"The WrapDB repository has a [helper script](https://github.com/mesonbuild/"
"wrapweb/blob/master/tools/repoinit.py)  to generate new repositories. The "
"documentation below roughly explains what it does using plain shell commands."
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:24
msgid "## Choosing the repository name"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:33
msgid ""
"Wrapped subprojects are used much like external dependencies. Thus they "
"should have the same name as the upstream projects. If the project provides "
"a pkg-config file, then the repository name should be the same as the pkg-"
"config name. Usually this is the name of the project, such as `libpng`. "
"Sometimes it is slightly different, however. As an example the libogg "
"project's chosen pkg-config name is `ogg` instead of `libogg`, which is the "
"reason why the repository is named plain `ogg`."
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:35
msgid "## Adding new project to the Wrap provider service"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:37
msgid "Each project gets its own repo. It is initialized like this:"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:45
#, no-wrap
msgid ""
"    git init\n"
"    git add readme.txt\n"
"    git commit -a -m 'Start of project foobar.'\n"
"    git tag commit_zero -a -m 'A tag that helps get revision ids for releases.'\n"
"    git remote add origin <repo url>\n"
"    git push -u origin master\n"
"    git push --tags\n"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:47
msgid ""
"Note that this is the *only* commit that will ever be made to master branch. "
"All other commits are done to branches."
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:49
msgid "Repo names must fully match this regexp: `[a-z0-9._]+`."
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:51
msgid "## Adding a new branch to an existing project"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:53
msgid "Create a new branch whose name matches the upstream release number."
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:58
#, no-wrap
msgid ""
"    git checkout master\n"
"    git checkout -b 1.0.0\n"
"    git push origin 1.0.0\n"
"    (or from GitHub web page, remember to branch from master)\n"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:60
msgid "Branch names must fully match this regexp: `[a-z0-9._]+`."
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:62
msgid "## Adding a new release to an existing branch"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:64
msgid ""
"Here is where the magic happens. Whenever a new commit is pushed into "
"GitHub's project branch, a new wrap is generated with an incremented version "
"number. All the old releases remain unaltered. New commits are always done "
"via GitHub merge requests and must be reviewed by someone other than the "
"submitter."
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:66
msgid ""
"Note that your Git repo must *not* contain the subdirectory of the source "
"release. That gets added automatically by the service. You also must *not* "
"commit any source code from the original tarball into the wrap repository."
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:68
msgid ""
"First you need to fork the repository to your own page. Then you can create "
"the first Wrap commit that usually looks something like this."
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:80
#, no-wrap
msgid ""
"    tar xzf libfoo_1.0.0.tar.gz\n"
"    git clone -b 1.0.0 git@github.com:yourusername/libfoo.git tmpdir\n"
"    mv tmpdir/.git libfoo-1.0.0\n"
"    rm -rf tmpdir\n"
"    cd libfoo-1.0.0\n"
"    git reset --hard\n"
"    emacs upstream.wrap meson.build\n"
"    <verify that your project builds and runs>\n"
"    git add upstream.wrap meson.build\n"
"    git commit -a -m 'Created wrap files for libfoo-1.0.0.'\n"
"    git push origin 1.0.0\n"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:83
msgid ""
"Now you can file a merge request. Remember to file it against branch 1.0.0 "
"rather than master. GitHub should do this automatically."
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:85
msgid "## Changes to original source"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:91
msgid ""
"The point of a wrap is to provide the upstream project with as few changes "
"as possible. Most projects should not contain anything more than a few Meson "
"definition files. Sometimes it may be necessary to add a template header "
"file or something similar. These should be held at a minimum."
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:96
msgid ""
"It should especially be noted that there must **not** be any patches to "
"functionality. All such changes must be submitted to upstream. You may also "
"host your own Git repo with the changes if you wish. The Wrap system has "
"native support for Git subprojects."
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:98
msgid "## Reviewing wraps"
msgstr ""

#. type: Plain text
#: Adding-new-projects-to-wrapdb.md:99
msgid "See [Wrap review guidelines](Wrap-review-guidelines.md)."
msgstr ""
