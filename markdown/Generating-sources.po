# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-09-01 15:59+0900\n"
"PO-Revision-Date: 2017-09-30 21:43+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Generating-sources.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Generating-sources.md:4
msgid "short-description: Generation of source files before compilation ..."
msgstr ""
"short-description: コンパイル前のソースファイル生成\n"
"..."

#. type: Plain text
#: Generating-sources.md:6
msgid "# Generating sources"
msgstr "# ソースファイル生成"

#. type: Plain text
#: Generating-sources.md:13
msgid ""
"Sometimes source files need to be preprocessed before they are passed to the "
"actual compiler. As an example you might want build an IDL compiler and then "
"run some files through that to generate actual source files. In Meson this "
"is done with [`generator()`](Reference-manual.md#generator) or "
"[`custom_target()`](Reference-manual.md#custom_target)."
msgstr ""

#. type: Plain text
#: Generating-sources.md:15
msgid "## Using custom_target()"
msgstr "## custom_target() の利用"

#. type: Plain text
#: Generating-sources.md:18
msgid ""
"Let's say you have a build target that must be built using sources generated "
"by a compiler. The compiler can either be a built target:"
msgstr ""
"Let's say you have a build target that must be built using sources generated "
"by a compiler. The compiler can either be a built target:"

#. type: Plain text
#: Generating-sources.md:22
msgid "```meson mycomp = executable('mycompiler', 'compiler.c')  ```"
msgstr ""
"```meson\n"
"mycomp = executable('mycompiler', 'compiler.c') \n"
"```"

#. type: Plain text
#: Generating-sources.md:25
msgid ""
"Or an external program provided by the system, or script inside the source "
"tree:"
msgstr ""

#. type: Plain text
#: Generating-sources.md:29
msgid "```meson mycomp = find_program('mycompiler')  ```"
msgstr ""
"```meson\n"
"mycomp = find_program('mycompiler') \n"
"```"

#. type: Plain text
#: Generating-sources.md:33
msgid ""
"Custom targets can take zero or more input files and use them to generate "
"one or more output files. Using a custom target, you can run this compiler "
"at build time to generate the sources:"
msgstr ""

#. type: Plain text
#: Generating-sources.md:42
#, no-wrap
msgid ""
"```meson\n"
"gen_src = custom_target('gen-output',\n"
"                        input : ['somefile1.c', 'file2.c'],\n"
"                        output : ['out.c', 'out.h'],\n"
"                        command : [mycomp, '@INPUT@',\n"
"                                   '--c-out', '@OUTPUT0@',\n"
"                                   '--h-out', '@OUTPUT1@'])\n"
"```\n"
msgstr ""

#. type: Plain text
#: Generating-sources.md:46
msgid ""
"The `@INPUT@` there will be transformed to `'somefile1.c' 'file2.c'`. Just "
"like the output, you can also refer to each input file individually by index."
msgstr ""

#. type: Plain text
#: Generating-sources.md:48
msgid "Then you just put that in your program and you're done."
msgstr ""

#. type: Plain text
#: Generating-sources.md:52
msgid "```meson executable('program', 'main.c', gen_src)  ```"
msgstr ""
"```meson\n"
"executable('program', 'main.c', gen_src) \n"
"```"

#. type: Plain text
#: Generating-sources.md:54
msgid "## Using generator()"
msgstr "## generator() の利用"

#. type: Plain text
#: Generating-sources.md:59
msgid ""
"Generators are similar to custom targets, except that we define a "
"*generator*, which defines how to transform an input file into one or more "
"output files, and then use that on as many input files as we want."
msgstr ""

#. type: Plain text
#: Generating-sources.md:65
msgid ""
"Note that generators should only be used for outputs that will only be used "
"as inputs for a build target or a custom target. When you use the processed "
"output of a generator in multiple targets, the generator will be run "
"multiple times to create outputs for each target. Each output will be "
"created in a target-private directory `@BUILD_DIR@`."
msgstr ""

#. type: Plain text
#: Generating-sources.md:70
msgid ""
"If you want to generate files for general purposes such as for generating "
"headers to be used by several sources, or data that will be installed, and "
"so on, use a [`custom_target()`](Reference-manual.md#custom_target) instead."
msgstr ""

#. type: Plain text
#: Generating-sources.md:77
#, no-wrap
msgid ""
"```meson\n"
"gen = generator(mycomp,\n"
"                output  : '@BASENAME@.c',\n"
"                arguments : ['@INPUT@', '@OUTPUT@'])\n"
"```\n"
msgstr ""

#. type: Plain text
#: Generating-sources.md:92
msgid ""
"The first argument is the executable file to run. The next file specifies a "
"name generation rule. It specifies how to build the output file name for a "
"given input name. `@BASENAME@` is a placeholder for the input file name "
"without preceding path or suffix (if any). So if the input file name were "
"`some/path/filename.idl`, then the output name would be `filename.c`. You "
"can also use `@PLAINNAME@`, which preserves the suffix which would result in "
"a file called `filename.idl.c`. The last line specifies the command line "
"arguments to pass to the executable. `@INPUT@` and `@OUTPUT@` are "
"placeholders for the input and output files, respectively, and will be "
"automatically filled in by Meson. If your rule produces multiple output "
"files and you need to pass them to the command line, append the location to "
"the output holder like this: `@OUTPUT0@`, `@OUTPUT1@` and so on."
msgstr ""

#. type: Plain text
#: Generating-sources.md:95
msgid ""
"With this rule specified we can generate source files and add them to a "
"target."
msgstr ""

#. type: Plain text
#: Generating-sources.md:100
msgid ""
"```meson gen_src = gen.process('input1.idl', 'input2.idl')  "
"executable('program', 'main.c', gen_src)  ```"
msgstr ""
"```meson\n"
"gen_src = gen.process('input1.idl', 'input2.idl') \n"
"executable('program', 'main.c', gen_src) \n"
"```"

#. type: Plain text
#: Generating-sources.md:102
msgid "Generators can also generate multiple output files with unknown names:"
msgstr ""

#. type: Plain text
#: Generating-sources.md:108
#, no-wrap
msgid ""
"```meson\n"
"gen2 = generator(someprog,\n"
"                 output : ['@BASENAME@.c', '@BASENAME@.h'],\n"
"                 arguments : ['--out_dir=@BUILD_DIR@', '@INPUT@'])\n"
"```\n"
msgstr ""

#. type: Plain text
#: Generating-sources.md:112
msgid ""
"In this case you can not use the plain `@OUTPUT@` variable, as it would be "
"ambiguous. This program only needs to know the output directory, it will "
"generate the file names by itself."
msgstr ""

#. type: Plain text
#: Generating-sources.md:125
msgid ""
"To make passing different additional arguments to the generator program at "
"each use possible, you can use the `@EXTRA_ARGS@` string in the `arguments` "
"list. Note that this placeholder can only be present as a whole string, and "
"not as a substring. The main reason is that it represents a list of strings, "
"which may be empty, or contain multiple elements; and in either case, "
"interpolating it into the middle of a single string would be troublesome. If "
"there are no extra arguments passed in from a `process()` invocation, the "
"placeholder is entirely omitted from the actual list of arguments, so an "
"empty string won't be passed to the generator program because of this. If "
"there are multiple elements in `extra_args`, they are inserted into to the "
"actual argument list as separate elements."
msgstr ""

#. type: Plain text
#: Generating-sources.md:133
#, no-wrap
msgid ""
"```meson\n"
"gen3 = generator(genprog,\n"
"                 output : '@BASENAME@.cc',\n"
"                 arguments : ['@INPUT@', '@EXTRA_ARGS@', '@OUTPUT@'])\n"
"gen3_src1 = gen3.process('input1.y')\n"
"gen3_src2 = gen3.process('input2.y', extra_args: '--foo')\n"
"gen3_src3 = gen3.process('input3.y', extra_args: ['--foo', '--bar'])\n"
"```\n"
msgstr ""
