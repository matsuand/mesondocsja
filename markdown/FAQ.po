# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-10-24 18:52+0900\n"
"PO-Revision-Date: 2017-09-30 21:43+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: FAQ.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: FAQ.md:5
msgid "title: FAQ ...  # Meson Frequently Asked Questions"
msgstr ""
"title: FAQ\n"
"...\n"
"# Meson のよく尋ねられる質問"

#. type: Plain text
#: FAQ.md:7
msgid "See also [How do I do X in Meson](howtox.md)."
msgstr ""

#. type: Plain text
#: FAQ.md:9
msgid "## Why is it called Meson?"
msgstr "## なぜ Meson という名前なんですか？"

#. type: Plain text
#: FAQ.md:11
msgid ""
"When the name was originally chosen, there were two main limitations: there "
"must not exist either a Debian package or a Sourceforge project of the given "
"name. This ruled out tens of potential project names. At some point the name "
"Gluon was considered. Gluons are elementary particles that hold protons and "
"neutrons together, much like a build system's job is to take pieces of "
"source code and a compiler and bind them to a complete whole."
msgstr ""

#. type: Plain text
#: FAQ.md:13
msgid ""
"Unfortunately this name was taken, too. Then the rest of subatomic particles "
"were examined and Meson was found to be available."
msgstr ""

#. type: Plain text
#: FAQ.md:15
msgid "## What is the correct way to use threads (such as pthreads)?"
msgstr ""

#. type: Plain text
#: FAQ.md:19
msgid "```meson thread_dep = dependency('threads')  ```"
msgstr ""

#. type: Plain text
#: FAQ.md:21
msgid ""
"This will set up everything on your behalf. People coming from Autotools or "
"CMake want to do this by looking for `libpthread.so` manually. Don't do "
"that, it has tricky corner cases especially when cross compiling."
msgstr ""

#. type: Plain text
#: FAQ.md:23
msgid ""
"## How to use Meson on a host where it is not available in system packages?"
msgstr ""

#. type: Plain text
#: FAQ.md:25
msgid ""
"Starting from version 0.29.0, Meson is available from the [Python Package "
"Index](https://pypi.python.org/pypi/meson/), so installing it simply a "
"matter of running this command:"
msgstr ""

#. type: Plain text
#: FAQ.md:29
msgid "```console $ pip3 install <your options here> meson ```"
msgstr ""

#. type: Plain text
#: FAQ.md:31
msgid ""
"If you don't have access to PyPI, that is not a problem either. Meson has "
"been designed to be easily runnable from an extracted source tarball or even "
"a git checkout. First you need to download Meson. Then use this command to "
"set up you build instead of plain `meson`."
msgstr ""

#. type: Plain text
#: FAQ.md:35
msgid "```console $ /path/to/meson.py <options> ```"
msgstr ""

#. type: Plain text
#: FAQ.md:37
msgid ""
"After this you don't have to care about invoking Meson any more. It "
"remembers where it was originally invoked from and calls itself "
"appropriately. As a user the only thing you need to do is to `cd` into your "
"build directory and invoke `ninja`."
msgstr ""

#. type: Plain text
#: FAQ.md:39
msgid "## Why can't I specify target files with a wildcard?"
msgstr ""

#. type: Plain text
#: FAQ.md:41
msgid "Instead of specifying files explicitly, people seem to want to do this:"
msgstr ""

#. type: Plain text
#: FAQ.md:45
msgid ""
"```meson executable('myprog', sources : '*.cpp') # This does NOT work! ```"
msgstr ""

#. type: Plain text
#: FAQ.md:47
msgid ""
"Meson does not support this syntax and the reason for this is simple. This "
"can not be made both reliable and fast. By reliable we mean that if the user "
"adds a new source file to the subdirectory, Meson should detect that and "
"make it part of the build automatically."
msgstr ""

#. type: Plain text
#: FAQ.md:49
msgid ""
"One of the main requirements of Meson is that it must be fast. This means "
"that a no-op build in a tree of 10 000 source files must take no more than a "
"fraction of a second. This is only possible because Meson knows the exact "
"list of files to check. If any target is specified as a wildcard glob, this "
"is no longer possible. Meson would need to re-evaluate the glob every time "
"and compare the list of files produced against the previous list. This means "
"inspecting the entire source tree (because the glob pattern could be `src/"
"\\*/\\*/\\*/\\*.cpp` or something like that). This is impossible to do "
"efficiently."
msgstr ""

#. type: Plain text
#: FAQ.md:51
msgid ""
"The main backend of Meson is Ninja, which does not support wildcard matches "
"either, and for the same reasons."
msgstr ""

#. type: Plain text
#: FAQ.md:53
msgid "Because of this, all source files must be specified explicitly."
msgstr ""

#. type: Plain text
#: FAQ.md:55
msgid "## But I really want to use wildcards!"
msgstr ""

#. type: Plain text
#: FAQ.md:57
msgid ""
"If the tradeoff between reliability and convenience is acceptable to you, "
"then Meson gives you all the tools necessary to do wildcard globbing. You "
"are allowed to run arbitrary commands during configuration. First you need "
"to write a script that locates the files to compile. Here's a simple shell "
"script that writes all `.c` files in the current directory, one per line."
msgstr ""

#. type: Plain text
#: FAQ.md:61
msgid "```bash #!/bin/sh"
msgstr ""

#. type: Plain text
#: FAQ.md:66
#, no-wrap
msgid ""
"for i in *.c; do\n"
"  echo $i\n"
"done\n"
"```\n"
msgstr ""

#. type: Plain text
#: FAQ.md:68
msgid ""
"Then you need to run this script in your Meson file, convert the output into "
"a string array and use the result in a target."
msgstr ""

#. type: Plain text
#: FAQ.md:74
msgid ""
"```meson c = run_command('grabber.sh')  sources = c.stdout().strip()."
"split('\\n')  e = executable('prog', sources)  ```"
msgstr ""

#. type: Plain text
#: FAQ.md:76
msgid ""
"The script can be any executable, so it can be written in shell, Python, "
"Lua, Perl or whatever you wish."
msgstr ""

#. type: Plain text
#: FAQ.md:78
msgid ""
"As mentioned above, the tradeoff is that just adding new files to the source "
"directory does *not* add them to the build automatically. To add them you "
"need to tell Meson to reinitialize itself. The simplest way is to touch the "
"`meson.build` file in your source root. Then Meson will reconfigure itself "
"next time the build command is run. Advanced users can even write a small "
"background script that utilizes a filesystem event queue, such as [inotify]"
"(https://en.wikipedia.org/wiki/Inotify), to do this automatically."
msgstr ""

#. type: Plain text
#: FAQ.md:80
msgid "## Should I use `subdir` or `subproject`?"
msgstr ""

#. type: Plain text
#: FAQ.md:82
msgid ""
"The answer is almost always `subdir`. Subproject exists for a very specific "
"use case: embedding external dependencies into your build process. As an "
"example, suppose we are writing a game and wish to use SDL. Let us further "
"suppose that SDL comes with a Meson build definition. Let us suppose even "
"further that we don't want to use prebuilt binaries but want to compile SDL "
"for ourselves."
msgstr ""

#. type: Plain text
#: FAQ.md:84
msgid ""
"In this case you would use `subproject`. The way to do it would be to grab "
"the source code of SDL and put it inside your own source tree. Then you "
"would do `sdl = subproject('sdl')`, which would cause Meson to build SDL as "
"part of your build and would then allow you to link against it or do "
"whatever else you may prefer."
msgstr ""

#. type: Plain text
#: FAQ.md:86
msgid ""
"For every other use you would use `subdir`. As an example, if you wanted to "
"build a shared library in one dir and link tests against it in another dir, "
"you would do something like this:"
msgstr ""

#. type: Plain text
#: FAQ.md:92
#, no-wrap
msgid ""
"```meson\n"
"project('simple', 'c')\n"
"subdir('src')   # library is built here\n"
"subdir('tests') # test binaries would link against the library here\n"
"```\n"
msgstr ""

#. type: Plain text
#: FAQ.md:94
msgid "## Why is there not a Make backend?"
msgstr ""

#. type: Plain text
#: FAQ.md:96
msgid ""
"Because Make is slow. This is not an implementation issue, Make simply can "
"not be made fast. For further info we recommend you read [this post](http://"
"neugierig.org/software/chromium/notes/2011/02/ninja.html) by Evan Martin, "
"the author of Ninja. Makefiles also have a syntax that is very unpleasant to "
"write which makes them a big maintenance burden."
msgstr ""

#. type: Plain text
#: FAQ.md:98
msgid ""
"The only reason why one would use Make instead of Ninja is working on a "
"platform that does not have a Ninja port. Even in this case it is an order "
"of magnitude less work to port Ninja than it is to write a Make backend for "
"Meson."
msgstr ""

#. type: Plain text
#: FAQ.md:100
msgid "Just use Ninja, you'll be happier that way. I guarantee it."
msgstr ""

#. type: Plain text
#: FAQ.md:102
msgid ""
"## Why is Meson not just a Python module so I could code my build setup in "
"Python?"
msgstr ""

#. type: Plain text
#: FAQ.md:104
msgid ""
"A related question to this is *Why is Meson's configuration language not "
"Turing-complete?*"
msgstr ""

#. type: Plain text
#: FAQ.md:106
msgid ""
"There are many good reasons for this, most of which are summarized on this "
"web page: [Against The Use Of Programming Languages in Configuration Files]"
"(https://taint.org/2011/02/18/001527a.html)."
msgstr ""

#. type: Plain text
#: FAQ.md:108
msgid ""
"In addition to those reasons, not exposing Python or any other \"real\" "
"programming language makes it possible to port Meson's implementation to a "
"different language. This might become necessary if, for example, Python "
"turns out to be a performance bottleneck. This is an actual problem that has "
"caused complications for GNU Autotools and SCons."
msgstr ""

#. type: Plain text
#: FAQ.md:110
msgid ""
"## How do I do the equivalent of Libtools export-symbol and export-regex?"
msgstr ""

#. type: Plain text
#: FAQ.md:112
msgid ""
"Either by using [GCC symbol visibility](https://gcc.gnu.org/wiki/Visibility) "
"or by writing a [linker script](https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/"
"html_mono/ld.html). This has the added benefit that your symbol definitions "
"are in a standalone file instead of being buried inside your build "
"definitions. An example can be found [here](https://github.com/jpakkane/"
"meson/tree/master/test%20cases/linuxlike/3%20linker%20script)."
msgstr ""

#. type: Plain text
#: FAQ.md:114
msgid ""
"## My project works fine on Linux and MinGW but fails with MSVC due to a "
"missing .lib file"
msgstr ""

#. type: Plain text
#: FAQ.md:116
msgid ""
"With GCC, all symbols on shared libraries are exported automatically unless "
"you specify otherwise. With MSVC no symbols are exported by default. If your "
"shared library exports no symbols, MSVC will silently not produce an import "
"library file leading to failures. The solution is to add symbol visibility "
"definitions [as specified in GCC wiki](https://gcc.gnu.org/wiki/Visibility)."
msgstr ""

#. type: Plain text
#: FAQ.md:118
msgid ""
"## I added some compiler flags and now the build fails with weird errors. "
"What is happening?"
msgstr ""

#. type: Plain text
#: FAQ.md:120
msgid "You probably did the equivalent to this:"
msgstr ""

#. type: Plain text
#: FAQ.md:125
#, no-wrap
msgid ""
"```meson\n"
"executable('foobar', ...\n"
"           c_args : '-some_arg -other_arg')\n"
"```\n"
msgstr ""

#. type: Plain text
#: FAQ.md:127
msgid ""
"Meson is *explicit*. In this particular case it will **not** automatically "
"split your strings at whitespaces, instead it will take it as is and work "
"extra hard to pass it to the compiler unchanged, including quoting it "
"properly over shell invocations. This is mandatory to make e.g. files with "
"spaces in them work flawlessly. To pass multiple command line arguments, you "
"need to explicitly put them in an array like this:"
msgstr ""

#. type: Plain text
#: FAQ.md:132
#, no-wrap
msgid ""
"```meson\n"
"executable('foobar', ...\n"
"           c_args : ['-some_arg', '-other_arg'])\n"
"```\n"
msgstr ""

#. type: Plain text
#: FAQ.md:134
msgid "## Why are changes to default project options ignored?"
msgstr ""

#. type: Plain text
#: FAQ.md:136
msgid "You probably had a project that looked something like this:"
msgstr ""

#. type: Plain text
#: FAQ.md:140
msgid "```meson project('foobar', 'cpp')  ```"
msgstr ""

#. type: Plain text
#: FAQ.md:142
msgid ""
"This defaults to `c++11` on GCC compilers. Suppose you want to use `c++14` "
"instead, so you change the definition to this:"
msgstr ""

#. type: Plain text
#: FAQ.md:146
msgid ""
"```meson project('foobar', 'cpp', default_options : ['cpp_std=c++14'])  ```"
msgstr ""

#. type: Plain text
#: FAQ.md:148
msgid ""
"But when you recompile, it still uses `c++11`. The reason for this is that "
"default options are only looked at when you are setting up a build directory "
"for the very first time. After that the setting is considered to have a "
"value and thus the default value is ignored. To change an existing build dir "
"to `c++14`, either reconfigure your build dir with `meson configure` or "
"delete the build dir and recreate it from scratch."
msgstr ""

#. type: Plain text
#: FAQ.md:150
msgid "## Does wrap download sources behind my back?"
msgstr ""

#. type: Plain text
#: FAQ.md:152
msgid ""
"It does not. In order for Meson to download anything from the net while "
"building, two conditions must be met."
msgstr ""

#. type: Plain text
#: FAQ.md:154
msgid ""
"First of all there needs to be a `.wrap` file with a download URL in the "
"`subprojects` directory. If one does not exist, Meson will not download "
"anything."
msgstr ""

#. type: Plain text
#: FAQ.md:156
msgid ""
"The second requirement is that there needs to be an explicit subproject "
"invocation in your `meson.build` files. Either `subproject('foobar')` or "
"`dependency('foobar', fallback : ['foobar', 'foo_dep'])`. If these "
"declarations either are not in any build file or they are not called (due to "
"e.g. `if/else`) then nothing is downloaded."
msgstr ""

#. type: Plain text
#: FAQ.md:157
msgid ""
"If this is not sufficient for you, starting from release 0.40.0 Meson has a "
"option called `wrap-mode` which can be used to disable wrap downloads "
"altogether with `--wrap-mode=nodownload`. You can also disable dependency "
"fallbacks altogether with `--wrap-mode=nofallback`, which also implies the "
"`nodownload` option."
msgstr ""
