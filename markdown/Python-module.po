# Japanese translations for PACKAGE package
# Copyright (C) 2018 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-09-04 11:55+0900\n"
"PO-Revision-Date: 2018-09-04 11:55+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Python-module.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Python-module.md:9
#, no-wrap
msgid ""
"short-description: Generic python module\n"
"authors:\n"
"    - name: Mathieu Duponchelle\n"
"      email: mathieu@centricular.com\n"
"      years: [2018]\n"
"      has-copyright: false\n"
"...\n"
msgstr ""

#. type: Plain text
#: Python-module.md:11
msgid "# Python module"
msgstr ""

#. type: Plain text
#: Python-module.md:14
msgid ""
"This module provides support for finding and building extensions against "
"python installations, be they python 2 or 3."
msgstr ""

#. type: Plain text
#: Python-module.md:16
#, no-wrap
msgid "*Added 0.46.0*\n"
msgstr ""

#. type: Plain text
#: Python-module.md:18
msgid "## Functions"
msgstr ""

#. type: Plain text
#: Python-module.md:20
msgid "### `find_installation()`"
msgstr ""

#. type: Plain text
#: Python-module.md:24
msgid "``` meson pymod.find_installation(name_or_path, ...)  ```"
msgstr ""

#. type: Plain text
#: Python-module.md:26
msgid "Find a python installation matching `name_or_path`."
msgstr ""

#. type: Plain text
#: Python-module.md:29
msgid ""
"That argument is optional, if not provided then the returned python "
"installation will be the one used to run meson."
msgstr ""

#. type: Plain text
#: Python-module.md:31
msgid "If provided, it can be:"
msgstr ""

#. type: Bullet: '- '
#: Python-module.md:34
msgid ""
"A simple name, eg `python-2.7`, meson will look for an external program "
"named that way, using [find_program]"
msgstr ""

#. type: Plain text
#: Python-module.md:36
msgid "- A path, eg `/usr/local/bin/python3.4m`"
msgstr ""

#. type: Bullet: '- '
#: Python-module.md:41
msgid ""
"One of `python2` or `python3`: in either case, the module will try some "
"alternative names: `py -2` or `py -3` on Windows, and `python` everywhere.  "
"In the latter case, it will check whether the version provided by the "
"sysconfig module matches the required major version"
msgstr ""

#. type: Plain text
#: Python-module.md:43
msgid "Keyword arguments are the following:"
msgstr ""

#. type: Bullet: '- '
#: Python-module.md:49
msgid ""
"`required`: by default, `required` is set to `true` and Meson will abort if "
"no python installation can be found. If `required` is set to `false`, Meson "
"will continue even if no python installation was found. You can then use the "
"`.found()` method on the returned object to check whether it was found or "
"not."
msgstr ""

#. type: Plain text
#: Python-module.md:51
#, no-wrap
msgid "**Returns**: a [python installation][`python_installation` object]\n"
msgstr ""

#. type: Plain text
#: Python-module.md:53
msgid "## `python_installation` object"
msgstr ""

#. type: Plain text
#: Python-module.md:56
msgid ""
"The `python_installation` object is an [external program], with several "
"added methods."
msgstr ""

#. type: Plain text
#: Python-module.md:58
msgid "### Methods"
msgstr ""

#. type: Plain text
#: Python-module.md:60
msgid "#### `extension_module()`"
msgstr ""

#. type: Plain text
#: Python-module.md:64
msgid ""
"``` meson shared_module py_installation.extension_module(module_name, "
"list_of_sources, ...)  ```"
msgstr ""
"``` meson\n"
"shared_module py_installation.extension_module(module_name, "
"list_of_sources, ...)\n"
"```"

#. type: Plain text
#: Python-module.md:67
msgid ""
"Create a `shared_module` target that is named according to the naming "
"conventions of the target platform."
msgstr ""

#. type: Plain text
#: Python-module.md:70
msgid ""
"All positional and keyword arguments are the same as for [shared_module], "
"excluding `name_suffix` and `name_prefix`, and with the addition of the "
"following:"
msgstr ""

#. type: Bullet: '- '
#: Python-module.md:76
msgid ""
"`subdir`: By default, meson will install the extension module in the "
"relevant top-level location for the python installation, eg `/usr/lib/site-"
"packages`. When subdir is passed to this method, it will be appended to that "
"location. This keyword argument is mutually exclusive with `install_dir`"
msgstr ""

#. type: Plain text
#: Python-module.md:79
msgid ""
"`extension_module` does not add any dependencies to the library so user may "
"need to add `dependencies : py_installation.dependency()`, see []"
"[`dependency()`]."
msgstr ""

#. type: Plain text
#: Python-module.md:81
#, no-wrap
msgid "**Returns**: a [buildtarget object]\n"
msgstr ""

#. type: Plain text
#: Python-module.md:83
msgid "#### `dependency()`"
msgstr ""

#. type: Plain text
#: Python-module.md:87
msgid "``` meson python_dependency py_installation.dependency(...)  ```"
msgstr ""

#. type: Plain text
#: Python-module.md:89
msgid ""
"This method accepts the same arguments as the standard [dependency] function."
msgstr ""

#. type: Plain text
#: Python-module.md:91
#, no-wrap
msgid "**Returns**: a [python dependency][`python_dependency` object]\n"
msgstr ""

#. type: Plain text
#: Python-module.md:93
msgid "#### `install_sources()`"
msgstr ""

#. type: Plain text
#: Python-module.md:97
msgid "``` meson void py_installation.install_sources(list_of_files, ...)  ```"
msgstr ""

#. type: Plain text
#: Python-module.md:99
msgid "Install actual python sources (`.py`)."
msgstr ""

#. type: Plain text
#: Python-module.md:102
msgid ""
"All positional and keyword arguments are the same as for [install_data], "
"with the addition of the following:"
msgstr ""

#. type: Bullet: '- '
#: Python-module.md:108
msgid ""
"`pure`: On some platforms, architecture independent files are expected to be "
"placed in a separate directory. However, if the python sources should be "
"installed alongside an extension module built with this module, this keyword "
"argument can be used to override that behaviour.  Defaults to `true`"
msgstr ""

#. type: Bullet: '- '
#: Python-module.md:111
msgid ""
"`subdir`: See documentation for the argument of the same name to []"
"[`extension_module()`]"
msgstr ""

#. type: Plain text
#: Python-module.md:113
msgid "#### `get_install_dir()`"
msgstr ""

#. type: Plain text
#: Python-module.md:117
msgid "``` meson string py_installation.get_install_dir(...)  ```"
msgstr ""

#. type: Plain text
#: Python-module.md:119
msgid "Retrieve the directory [][`install_sources()`] will install to."
msgstr ""

#. type: Plain text
#: Python-module.md:122
msgid ""
"It can be useful in cases where `install_sources` cannot be used directly, "
"for example when using [configure_file]."
msgstr ""

#. type: Plain text
#: Python-module.md:125
msgid ""
"This function accepts no arguments, its keyword arguments are the same as []"
"[`install_sources()`]."
msgstr ""

#. type: Plain text
#: Python-module.md:127 Python-module.md:141 Python-module.md:164
#: Python-module.md:196
#, no-wrap
msgid "**Returns**: A string\n"
msgstr ""

#. type: Plain text
#: Python-module.md:129
msgid "#### `language_version()`"
msgstr ""

#. type: Plain text
#: Python-module.md:133
msgid "``` meson string py_installation.language_version()  ```"
msgstr ""

#. type: Plain text
#: Python-module.md:135
msgid "Get the major.minor python version, eg `2.7`."
msgstr ""

#. type: Plain text
#: Python-module.md:137
msgid "The version is obtained through the `sysconfig` module."
msgstr ""

#. type: Plain text
#: Python-module.md:139
msgid "This function expects no arguments or keyword arguments."
msgstr ""

#. type: Plain text
#: Python-module.md:143
msgid "#### `get_path()`"
msgstr ""

#. type: Plain text
#: Python-module.md:147
msgid "``` meson string py_installation.get_path(path_name, fallback)  ```"
msgstr ""

#. type: Plain text
#: Python-module.md:149
msgid "Get a path as defined by the `sysconfig` module."
msgstr ""

#. type: Plain text
#: Python-module.md:151 Python-module.md:183
msgid "For example:"
msgstr ""

#. type: Plain text
#: Python-module.md:155
msgid "``` meson purelib = py_installation.get_path('purelib')  ```"
msgstr ""

#. type: Plain text
#: Python-module.md:158
msgid ""
"This function requires at least one argument, `path_name`, which is expected "
"to be a non-empty string."
msgstr ""

#. type: Plain text
#: Python-module.md:162
msgid ""
"If `fallback` is specified, it will be returned if no path with the given "
"name exists. Otherwise, attempting to read a non-existing path will cause a "
"fatal error."
msgstr ""

#. type: Plain text
#: Python-module.md:166
msgid "#### `has_path()`"
msgstr ""

#. type: Plain text
#: Python-module.md:170
#, no-wrap
msgid ""
"``` meson\n"
"    bool py_installation.has_path(path_name)\n"
"```\n"
msgstr ""

#. type: Plain text
#: Python-module.md:173
#, no-wrap
msgid ""
"**Returns**: true if a path named `path_name` can be retrieved with\n"
"[][`get_path()`], false otherwise.\n"
msgstr ""

#. type: Plain text
#: Python-module.md:175
msgid "#### `get_variable()`"
msgstr ""

#. type: Plain text
#: Python-module.md:179
msgid ""
"``` meson string py_installation.get_variable(variable_name, fallback)  ```"
msgstr ""

#. type: Plain text
#: Python-module.md:181
msgid "Get a variable as defined by the `sysconfig` module."
msgstr ""

#. type: Plain text
#: Python-module.md:187
msgid "``` meson py_bindir = py_installation.get_variable('BINDIR', '')  ```"
msgstr ""

#. type: Plain text
#: Python-module.md:190
msgid ""
"This function requires at least one argument, `variable_name`, which is "
"expected to be a non-empty string."
msgstr ""

#. type: Plain text
#: Python-module.md:194
msgid ""
"If `fallback` is specified, it will be returned if no variable with the "
"given name exists. Otherwise, attempting to read a non-existing variable "
"will cause a fatal error."
msgstr ""

#. type: Plain text
#: Python-module.md:198
msgid "#### `has_variable()`"
msgstr ""

#. type: Plain text
#: Python-module.md:202
#, no-wrap
msgid ""
"``` meson\n"
"    bool py_installation.has_variable(variable_name)\n"
"```\n"
msgstr ""

#. type: Plain text
#: Python-module.md:205
#, no-wrap
msgid ""
"**Returns**: true if a variable named `variable_name` can be retrieved with\n"
"[][`get_variable()`], false otherwise.\n"
msgstr ""

#. type: Plain text
#: Python-module.md:207
msgid "## `python_dependency` object"
msgstr ""

#. type: Plain text
#: Python-module.md:211
msgid ""
"This [dependency object] subclass will try various methods to obtain the "
"compiler and linker arguments, starting with pkg-config then potentially "
"using information obtained from python's `sysconfig` module."
msgstr ""

#. type: Plain text
#: Python-module.md:213
msgid "It exposes the same methods as its parent class."
msgstr ""

#. type: Plain text
#: Python-module.md:221
msgid ""
"[find_program]: Reference-manual.md#find_program [shared_module]: Reference-"
"manual.md#shared_module [external program]: Reference-manual.md#external-"
"program-object [dependency]: Reference-manual.md#dependency [install_data]: "
"Reference-manual.md#install-data [configure_file]: Reference-manual."
"md#configure-file [dependency object]: Reference-manual.md#dependency-object "
"[buildtarget object]: Reference-manual.md#build-target-object"
msgstr ""
