# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-09-30 21:43+0900\n"
"PO-Revision-Date: 2017-09-30 21:43+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Build-targets.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Build-targets.md:4
msgid "short-description: Definition of build targets ..."
msgstr "short-description: ビルドターゲットの定義\n..."

#. type: Plain text
#: Build-targets.md:6
msgid "# Build targets"
msgstr "# ビルドターゲット"

#. type: Plain text
#: Build-targets.md:14
msgid ""
"Meson provides three kinds of build targets: executables, static libraries "
"and shared libraries. They are created with the commands `executable`, "
"`static_library` and `shared_library`, respectively. All objects created in "
"this way are **immutable**. That is, you can not change any aspect of them "
"after they have been constructed. This ensures that all information "
"pertaining to a given build target is specified in one well defined place."
msgstr ""
"Meson には 3 種類のビルドターゲットがあります。実行モジュール、スタティック"
"ライブラリ、共有ライブラリです。これは `executable`、`static_library`、"
"`shared_library` の各コマンドによって生成されます。このコマンドによって生成"
"されるオブジェクトは**不変的**なものです。つまり一度作り上げたものは、他の"
"ものに変更することはできません。したがって記述されたビルドターゲットの情報"
"のすべては確実に保持され、1 つの記述箇所において特定されることになります。"

#. type: Plain text
#: Build-targets.md:16
msgid "As an example, here is how you would build a shared library."
msgstr "例として、以下は共有ライブラリを作り出すものです。"

#. type: Plain text
#: Build-targets.md:21
msgid ""
"```meson project('shared lib', 'c')  shared_library('mylib', 'source.c')  ```"
msgstr ""
"```meson\nproject('shared lib', 'c')\nshared_library('mylib', 'source.c')\n```"

#. type: Plain text
#: Build-targets.md:24
msgid ""
"In Unix-like operating systems, shared libraries can be versioned. Meson "
"supports this with keyword arguments."
msgstr ""
"Unix ライクなオペレーティングシステムにおいて、共有ライブラリにはバージョン"
"番号がつくことがあります。これに対して Meson はキーワード引数を用いて対応す"
"ることができます。"

#. type: Plain text
#: Build-targets.md:29
msgid ""
"```meson project('shared lib', 'c')  shared_library('mylib', 'source.c', "
"version : '1.2.3', soversion : '0')  ```"
msgstr ""
"```meson\nproject('shared lib', 'c') \nshared_library('mylib', 'source.c', "
"version : '1.2.3', soversion : '0') \n```"

#. type: Plain text
#: Build-targets.md:32
msgid ""
"It is common to build a library and then an executable that links against "
"it. This is supported as well."
msgstr ""
"ライブラリをビルドしたら、普通はそれをリンクする実行モジュールを生成します。"
"これも以下のようにして対応できます。"

#. type: Plain text
#: Build-targets.md:38
msgid ""
"```meson project('shared lib', 'c')  lib = shared_library('mylib', 'source."
"c')  executable('program', 'prog.c', link_with : lib)  ```"
msgstr ""
"```meson\nproject('shared lib', 'c') \nlib = shared_library('mylib', 'source."
"c') \nexecutable('program', 'prog.c', link_with : lib) \n```"

#. type: Plain text
#: Build-targets.md:42
msgid ""
"Meson sets things up so that the resulting executable can be run directly "
"from the build directory. There is no need to write shell scripts or set "
"environment variables."
msgstr ""
"Meson はすべてをうまく処理してくれるので、ビルド結果として生成された実行モ"
"ジュールは、ビルドディレクトリ内にて直接実行できるようになります。このとき"
"には、シェルスクリプトを用意したり環境変数を定義したりするようなことは必要"
"ありません。"

#. type: Plain text
#: Build-targets.md:44
msgid "One target can have multiple language source files."
msgstr ""
"ビルドターゲットにおいては、プログラミング言語の異なるソースファイルを複数"
"指定することもできます。"

#. type: Plain text
#: Build-targets.md:49
msgid ""
"```meson project('multilang', 'c', 'cpp')  executable('multiexe', 'file.c', "
"'file2.cc')  ```"
msgstr ""
"```meson\nproject('multilang', 'c', 'cpp') \nexecutable('multiexe', 'file.c', "
"'file2.cc') \n```"

#. type: Plain text
#: Build-targets.md:51
#, no-wrap
msgid ""
"Object files\n"
"--\n"
msgstr ""
"オブジェクトファイル\n"
"--\n"

#. type: Plain text
#: Build-targets.md:56
msgid ""
"Sometimes you can't build files from sources but need to utilize an existing "
"object file. A typical case is using an object file provided by a third "
"party. Object files can be specified just like sources."
msgstr ""

#. type: Plain text
#: Build-targets.md:60
msgid ""
"```meson exe = executable('myexe', 'source.cpp', objects : "
"'third_party_object.o')  ```"
msgstr ""
"```meson\nexe = executable('myexe', 'source.cpp', objects : "
"'third_party_object.o') \n```"

#. type: Plain text
#: Build-targets.md:69
msgid ""
"A different case is when you want to use object files built in one target "
"directly in another. A typical case is when you build a shared library and "
"it has an internal class that is not exported in the ABI. This means you "
"can't access it even if you link against the library. Typical workarounds "
"for this include building both a shared and static version of the library or "
"putting the source file in the test executable's source list. Both of these "
"approaches cause the source to be built twice, which is slow."
msgstr ""

#. type: Plain text
#: Build-targets.md:72
msgid ""
"In Meson you can extract object files from targets and use them as-is on "
"other targets. This is the syntax for it."
msgstr ""

#. type: Plain text
#: Build-targets.md:78
msgid ""
"```meson lib = shared_library('somelib', 'internalclass.cc', 'file."
"cc', ...)  eo = lib.extract_objects('internalclass.cc')  "
"executable('classtest', 'classtest.cpp', objects : eo)  ```"
msgstr ""
"```meson\nlib = shared_library('somelib', 'internalclass.cc', 'file."
"cc', ...) \neo = lib.extract_objects('internalclass.cc') \n"
"executable('classtest', 'classtest.cpp', objects : eo) \n```"

#. type: Plain text
#: Build-targets.md:81
msgid ""
"Here we take the internal class object and use it directly in the test. The "
"source file is only compiled once."
msgstr ""

#. type: Plain text
#: Build-targets.md:88
msgid ""
"Note that careless use of this feature may cause strange bugs. As an example "
"trying to use objects of an executable or static library in a shared library "
"will not work because shared library objects require special compiler flags. "
"Getting this right is the user's responsibility. For this reason it is "
"strongly recommended that you only use this feature for generating unit test "
"executables in the manner described above."
msgstr ""
