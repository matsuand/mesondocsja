# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-09-30 21:44+0900\n"
"PO-Revision-Date: 2017-09-30 21:44+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Simple-comparison.md:2
msgid "# A simple comparison"
msgstr ""

#. type: Plain text
#: Simple-comparison.md:4
msgid ""
"In this experiment we generated one thousand C files with contents that "
"looked like this."
msgstr ""

#. type: Plain text
#: Simple-comparison.md:8
msgid "```c #include<stdio.h> #include\"header.h\""
msgstr ""

#. type: Plain text
#: Simple-comparison.md:11
msgid "int func23() { return 0; } ```"
msgstr ""

#. type: Plain text
#: Simple-comparison.md:13
msgid ""
"The function number was different in each file. In addition there was a main "
"C file that just called each function in turn. We then generated build "
"system files for *Meson*, *CMake*, *SCons*, *Premake* and *Autotools* that "
"compiled these files into a single executable."
msgstr ""

#. type: Plain text
#: Simple-comparison.md:15
msgid ""
"With this we measured three different things. The first is configuration "
"time, that is, the time the build system takes to generate necessary build "
"files. This is usually called the *configure step*. The time was measured in "
"seconds."
msgstr ""

#. type: Plain text
#: Simple-comparison.md:17
msgid ""
"The second thing to measure was the build time. This should be limited by "
"the compiler and in the optimal case should be the same for every build "
"system. Four parallel processes were used in this test."
msgstr ""

#. type: Plain text
#: Simple-comparison.md:19
msgid ""
"The third thing we measured was the empty build time. This measures how much "
"time the build system takes to check the states of all source files because "
"if any of them could potentially cause a rebuild."
msgstr ""

#. type: Plain text
#: Simple-comparison.md:21
msgid ""
"Since CMake has two different backends, Make and Ninja, we ran the tests on "
"both of them. All tests were run on a 2011 era Macbook Pro running Ubuntu "
"13/04. The tests were run multiple times and we always took the fastest time."
msgstr ""

#. type: Plain text
#: Simple-comparison.md:23
msgid "Here are the results for configuration time."
msgstr ""

#. type: Plain text
#: Simple-comparison.md:25
msgid "![Configuration times](images/conftime.png)"
msgstr ""

#. type: Plain text
#: Simple-comparison.md:27
msgid ""
"The reason SCons got zero seconds on this test is because you cannot "
"separate configure and build steps. They run as one unit. Autotools is the "
"clear loser of this test as it is over an order of magnitude slower than the "
"second slowest one. This configuration time includes both autogen and "
"configure. All other systems take less than one second to do this setup, "
"which is fast enough for a human being to interpret as instantaneous."
msgstr ""

#. type: Plain text
#: Simple-comparison.md:29
msgid ""
"![Build times](https://raw.githubusercontent.com/wiki/jpakkane/meson/"
"buildtime.png)"
msgstr ""

#. type: Plain text
#: Simple-comparison.md:31
msgid ""
"Build times are a bit more even. SCons is the slowest, being almost ten "
"seconds slower than the second slowest. Some of it is work from the "
"configure step but it still has the worst performance. Premake is the "
"fastest Make-based build system narrowly beating out Autotools. Both Ninja-"
"based build systems are faster than all non-Ninja ones with Meson being "
"slightly faster. In practice the difference is minimal. The advantages of "
"Ninja can be seen by comparing CMake's times when using Make or Ninja. It is "
"possible to shave off 3.5 seconds (over 20%) of the total build time just by "
"changing the backend. The project's CMake configuration files don't need any "
"changes."
msgstr ""

#. type: Plain text
#: Simple-comparison.md:33
msgid ""
"![No-op time](https://raw.githubusercontent.com/wiki/jpakkane/meson/"
"emptytime.png)"
msgstr ""

#. type: Plain text
#: Simple-comparison.md:35
msgid ""
"Empty build times reflect the performance of regular build times. SCons is "
"again the slowest taking over three seconds compared to Meson, which takes "
"only 0.03 seconds, a difference of two orders of magnitude. Even Autotools, "
"the fastest Make-based system, is almost one order of magnitude slower. "
"Ninja holds the top spots just like in the previous test."
msgstr ""

#. type: Plain text
#: Simple-comparison.md:37
#, no-wrap
msgid ""
"Conclusions\n"
"-----\n"
msgstr ""

#. type: Plain text
#: Simple-comparison.md:40
msgid ""
"Build system performance matters. Even with this extremely simple example we "
"can find differences between various popular build systems. As the project "
"size increases, these differences grow even larger. (The author has "
"witnessed no-op build times of 30 seconds for Make versus less than one "
"second for Ninja when compiling the Clang compiler.) Keeping incremental "
"build times low is one of the major keys of programmer productivity as it "
"allows developers to iterate faster and stay in the creative zone."
msgstr ""

#. type: Plain text
#: Simple-comparison.md:42
#, no-wrap
msgid ""
"Original scripts\n"
"-----\n"
msgstr ""

#. type: Plain text
#: Simple-comparison.md:45
msgid ""
"Those who want to run these experiments themselves can download the scripts "
"here:"
msgstr ""

#. type: Bullet: '* '
#: Simple-comparison.md:47
msgid ""
"[Generator script](https://raw.githubusercontent.com/wiki/jpakkane/meson/"
"gen_src.py)"
msgstr ""

#. type: Bullet: '* '
#: Simple-comparison.md:47
msgid ""
"[Measurement script](https://raw.githubusercontent.com/wiki/jpakkane/meson/"
"measure.py)"
msgstr ""
