# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-09-30 21:44+0900\n"
"PO-Revision-Date: 2017-09-30 21:44+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Shipping-prebuilt-binaries-as-wraps.md:2
msgid "# Shipping prebuilt binaries as wraps"
msgstr ""

#. type: Plain text
#: Shipping-prebuilt-binaries-as-wraps.md:4
msgid ""
"A common dependency case, especially on Windows, is the need to provide "
"dependencies as prebuilt binaries rather than Meson projects that you build "
"from scratch. Common reasons include not having access to source code, not "
"having the time and effort to rewrite a legacy system's build definitions to "
"Meson or just the fact that compiling the dependency projects takes too long."
msgstr ""

#. type: Plain text
#: Shipping-prebuilt-binaries-as-wraps.md:6
msgid ""
"Packaging a project is straightforward. As an example let's look at a case "
"where the project consists of one static library called `bob` and some "
"headers. To create a binary dependency project we put the static library at "
"the top level and headers in a subdirectory called `include`. The Meson "
"build definition would look like the following."
msgstr ""

#. type: Plain text
#: Shipping-prebuilt-binaries-as-wraps.md:9
msgid "```meson project('binary dep', 'c')"
msgstr "```meson\nproject('binary dep', 'c')"

#. type: Plain text
#: Shipping-prebuilt-binaries-as-wraps.md:15
#, no-wrap
msgid ""
"cc = meson.get_compiler('c')\n"
"bin_dep = declare_dependency(\n"
"  dependencies : cc.find_library('bob', dirs : meson.current_source_dir()),\n"
"  include_directories : include_directories('include'))\n"
"```\n"
msgstr ""

#. type: Plain text
#: Shipping-prebuilt-binaries-as-wraps.md:17
msgid "Now you can use this subproject as if it was a Meson project:"
msgstr ""

#. type: Plain text
#: Shipping-prebuilt-binaries-as-wraps.md:23
msgid ""
"```meson project('using dep', 'c')  bob_dep = subproject('bob')."
"get_variable('bin_dep')  executable('prog', 'prog.c', dependencies : "
"bob_dep)  ```"
msgstr ""
"```meson\nproject('using dep', 'c') \nbob_dep = subproject('bob')."
"get_variable('bin_dep') \nexecutable('prog', 'prog.c', dependencies : "
"bob_dep) \n```"

#. type: Plain text
#: Shipping-prebuilt-binaries-as-wraps.md:24
msgid ""
"Note that often libraries compiled with different compilers (or even "
"compiler flags) might not be compatible. If you do this, then you are "
"responsible for verifying that your libraries are compatible, Meson will not "
"check things for you."
msgstr ""
