# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-09-30 21:44+0900\n"
"PO-Revision-Date: 2017-09-30 21:44+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Release-notes-for-0.40.0.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:5
msgid "title: Release 0.40 short-description: Release notes for 0.40 ..."
msgstr "title: リリース 0.40\nshort-description: リリースノート 0.40\n..."

#. type: Plain text
#: Release-notes-for-0.40.0.md:7
msgid "# New features"
msgstr "# 新機能"

#. type: Plain text
#: Release-notes-for-0.40.0.md:9
msgid ""
"## Outputs of generators can be used in custom targets in the VS backend"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:11
msgid ""
"This has been possible with the Ninja backend for a long time but now the "
"Visual Studio backend works too."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:13
msgid "## `compute_int` method in the compiler objects"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:15
msgid ""
"This method can be used to evaluate the value of an expression. As an "
"example:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:20
msgid ""
"```meson cc = meson.get_compiler('c')  two = cc.compute_int('1 + 1') # A "
"very slow way of adding two numbers.  ```"
msgstr ""
"```meson\ncc = meson.get_compiler('c')\ntwo = cc.compute_int('1 + 1') # A "
"very slow way of adding two numbers.\n```"

#. type: Plain text
#: Release-notes-for-0.40.0.md:22
msgid "## Visual Studio 2017 support"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:24
msgid ""
"There is now a VS2017 backend (`--backend=vs2017`) as well as a generic VS "
"backend (`--backend=vs`) that autodetects the currently active VS version."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:26
msgid "## Automatic initialization of subprojects that are git submodules"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:28
msgid ""
"If you have a directory inside your subprojects directory (usually "
"`subprojects/`) that is a git submodule, meson will automatically initialize "
"it if your build files refer to it. This will be done without needing a wrap "
"file since git contains all the information needed."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:30
msgid "## No download mode for wraps"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:32
msgid ""
"Added a new option `wrap-mode` that can be toggled to prevent Meson from "
"downloading dependency projects. Attempting to do so will cause an error. "
"This is useful for distro packagers and other cases where you must "
"explicitly enforce that nothing is downloaded from the net during "
"configuration or build."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:34
msgid "## Overriding options per target"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:36
msgid ""
"Build targets got a new keyword argument `override_options` that can be used "
"to override system options. As an example if you have a target that you know "
"can't be built with `-Werror` enabled you can override the value of the "
"option like this:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:40
msgid ""
"```meson executable('foo', 'foo.c', override_options : ['werror=false'])  ```"
msgstr ""
"```meson\nexecutable('foo', 'foo.c', override_options : ['werror=false'])\n```"

#. type: Plain text
#: Release-notes-for-0.40.0.md:42
msgid ""
"Note that this does not affect project options, only those options that come "
"from Meson (language standards, unity builds etc)."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:44
msgid "## Compiler object get define"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:46
msgid ""
"Compiler objects got a new method `get_define()` that returns the given "
"preprocessor symbol as a string."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:51
msgid ""
"```meson cc = meson.get_compiler('c')  one = cc.get_define('__linux__') # "
"returns '1' on Linux hosts ```"
msgstr ""
"```meson\ncc = meson.get_compiler('c')\none = cc.get_define('__linux__') # "
"returns '1' on Linux hosts\n```"

#. type: Plain text
#: Release-notes-for-0.40.0.md:53
msgid "## Cygwin support"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:55
msgid ""
"Meson now works under Cygwin and we have added it to our CI test matrix."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:57
msgid "## Multiple install directories"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:59
msgid ""
"Custom targets can produce many output files. Previously it was only "
"possible to install all of them in the same directory, but now you can "
"install each output in its own directory like this:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:67
#, no-wrap
msgid ""
"```meson\n"
"custom_target('two_out',\n"
"  output : ['diff.h', 'diff.sh'],\n"
"  command : [creator, '@OUTDIR@'],\n"
"  install : true,\n"
"  install_dir : ['dir1', 'dir2'])\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:69
msgid ""
"For backwards compatibility and for conciseness, if you only specify one "
"directory all outputs will be installed into it."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:71
msgid ""
"The same feature is also available for Vala build targets. For instance, to "
"install a shared library built by valac, the generated header, and the "
"generated VAPI (respectively) into the default locations, you can do:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:77
#, no-wrap
msgid ""
"```meson\n"
"shared_library('valalib', 'mylib.vala',\n"
"  install : true,\n"
"  install_dir : [true, true, true])\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:79
msgid ""
"To install any of the three in a custom directory, just pass it as a string "
"instead of `true`. To not install it, pass `false`. You can also pass a "
"single string (as before) and it will cause only the library to be "
"installed, so this is a backwards-compatible change."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:81
msgid "## Can specify method of obtaining dependencies"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:83
msgid ""
"Some dependencies have many ways of being provided. As an example Qt can "
"either be detected via `pkg-config` or `qmake`. Until now Meson has had a "
"heuristic for selecting which method to choose but sometimes it does the "
"wrong thing. This can now be overridden with the `method` keyword like this:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:87
msgid ""
"```meson qt5_dep = dependency('qt5', modules : 'core', method : 'qmake')  ```"
msgstr ""
"```meson\nqt5_dep = dependency('qt5', modules : 'core', method : 'qmake')\n```"

#. type: Plain text
#: Release-notes-for-0.40.0.md:89
msgid "## Link whole contents of static libraries"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:91
msgid ""
"The default behavior of static libraries is to discard all symbols that are "
"not not directly referenced. This may lead to exported symbols being lost. "
"Most compilers support \"whole archive\" linking that includes all symbols "
"and code of a given static library. This is exposed with the `link_whole` "
"keyword."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:95
msgid ""
"```meson shared_library('foo', 'foo.c', link_whole : some_static_library)  "
"```"
msgstr ""
"```meson\nshared_library('foo', 'foo.c', link_whole : some_static_library)\n"
"```"

#. type: Plain text
#: Release-notes-for-0.40.0.md:97
msgid ""
"Note that Visual Studio compilers only support this functionality on VS 2015 "
"and newer."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:99
msgid "## Unity builds only for subprojects"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:101
msgid ""
"Up until now unity builds were either done for every target or none of them. "
"Now unity builds can be specified to be enabled only for subprojects, which "
"change seldom, and not for the master project, which changes a lot. This is "
"enabled by setting the `unity` option to `subprojects`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:103
msgid "## Running `mesonintrospect` from scripts"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:105
msgid ""
"Meson now sets the `MESONINTROSPECT` environment variable in addition to "
"`MESON_SOURCE_ROOT` and other variables when running scripts. It is "
"guaranteed to point to the correct `mesonintrospect` script, which is "
"important when running meson uninstalled from git or when your `PATH`s may "
"not be set up correctly."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.40.0.md:106
msgid ""
"Specifically, the following meson functions will set it: `meson."
"add_install_script()`, `meson.add_postconf_script()`, `run_command()`, "
"`run_target()`."
msgstr ""
