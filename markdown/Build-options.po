# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-09-01 15:59+0900\n"
"PO-Revision-Date: 2017-09-30 21:43+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Build-options.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Build-options.md:4
msgid "short-description: Build options to configure project properties ..."
msgstr ""
"short-description: プロジェクトプロパティを設定するビルドオプション\n"
"..."

#. type: Plain text
#: Build-options.md:6
msgid "# Build options"
msgstr "# ビルドオプション"

#. type: Plain text
#: Build-options.md:12
msgid ""
"Most non-trivial builds require user-settable options. As an example a "
"program may have two different data backends that are selectable at build "
"time. Meson provides for this by having a option definition file. Its name "
"is `meson_options.txt` and it is placed at the root of your source tree."
msgstr ""

#. type: Plain text
#: Build-options.md:14
msgid "Here is a simple option file."
msgstr ""

#. type: Plain text
#: Build-options.md:24
#, fuzzy
msgid ""
"```meson option('someoption', type : 'string', value : 'optval', "
"description : 'An option')  option('other_one', type : 'boolean', value : "
"false)  option('combo_opt', type : 'combo', choices : ['one', 'two', "
"'three'], value : 'three')  option('integer_opt', type : 'integer', min : 0, "
"max : 5, value : 3) # Since 0.45.0 option('free_array_opt', type : 'array', "
"value : ['one', 'two'])  option('array_opt', type : 'array', choices : "
"['one', 'two', 'three'], value : ['one', 'two'])  option('some_feature', "
"type : 'feature', value : 'enabled')  ```"
msgstr ""
"```meson\n"
"option('someoption', type : 'string', value : 'optval', description : 'An "
"option')\n"
"option('other_one', type : 'boolean', value : false)\n"
"option('combo_opt', type : 'combo', choices : ['one', 'two', 'three'], "
"value : 'three')\n"
"option('free_array_opt', type : 'array', value : ['one', 'two'])\n"
"option('array_opt', type : 'array', choices : ['one', 'two', 'three'], "
"value : ['one', 'two'])\n"
"```"

#. type: Plain text
#: Build-options.md:26
#, fuzzy
msgid "## Build option types"
msgstr "# ビルドオプション"

#. type: Plain text
#: Build-options.md:29
msgid ""
"All types allow a `description` value to be set describing the option, if no "
"description is set then the name of the option will be used instead."
msgstr ""

#. type: Plain text
#: Build-options.md:31
msgid "### Strings"
msgstr ""

#. type: Plain text
#: Build-options.md:34
msgid ""
"The string type is a free form string. If the default value is not set then "
"an empty string will be used as the default."
msgstr ""

#. type: Plain text
#: Build-options.md:36
msgid "### Booleans"
msgstr ""

#. type: Plain text
#: Build-options.md:39
msgid ""
"Booleans may have values of either `true` or `false`. If no default value is "
"supplied then `true` will be used as the default."
msgstr ""

#. type: Plain text
#: Build-options.md:41
msgid "### Combos"
msgstr ""

#. type: Plain text
#: Build-options.md:45
msgid ""
"A combo allows any one of the values in the `choices` parameter to be "
"selected.  If no default value is set then the first value will be the "
"default."
msgstr ""

#. type: Plain text
#: Build-options.md:47
msgid "### Integers"
msgstr ""

#. type: Plain text
#: Build-options.md:51
msgid ""
"An integer option contains a single integer with optional upper and lower "
"values that are specified with the `min` and `max` keyword arguments."
msgstr ""

#. type: Plain text
#: Build-options.md:53
msgid "This type is available since Meson version 0.45.0."
msgstr ""

#. type: Plain text
#: Build-options.md:55
msgid "### Arrays"
msgstr ""

#. type: Plain text
#: Build-options.md:63
msgid ""
"Arrays represent an array of strings. By default the array can contain "
"arbitrary strings. To limit the possible values that can used set the "
"`choices` parameter. Meson will then only allow the value array to contain "
"strings that are in the given list. The array may be empty. The `value` "
"parameter specifies the default value of the option and if it is unset then "
"the values of `choices` will be used as the default."
msgstr ""

#. type: Plain text
#: Build-options.md:66
msgid ""
"As of 0.47.0 -Dopt= and -Dopt=[] both pass an empty list, before this -Dopt= "
"would pass a list with an empty string."
msgstr ""

#. type: Plain text
#: Build-options.md:68
msgid "This type is available since version 0.44.0"
msgstr ""

#. type: Plain text
#: Build-options.md:70
msgid "### Features"
msgstr ""

#. type: Plain text
#: Build-options.md:78
msgid ""
"A `feature` option has three states: `enabled`, `disabled` or `auto`. It is "
"intended to be passed as value for the `required` keyword argument of most "
"functions.  Currently supported in [`dependency()`](Reference-manual."
"md#dependency), [`find_library()`](Reference-manual.md#compiler-object), "
"[`find_program()`](Reference-manual.md#find_program) and [`add_languages()`]"
"(Reference-manual.md#add_languages) functions."
msgstr ""

#. type: Plain text
#: Build-options.md:82
msgid ""
"- `enabled` is the same as passing `required : true`.  - `auto` is the same "
"as passing `required : false`.  - `disabled` do not look for the dependency "
"and always return 'not-found'."
msgstr ""

#. type: Plain text
#: Build-options.md:87
msgid ""
"When getting the value of this type of option using `get_option()`, a "
"special object is returned instead of the string representation of the "
"option's value.  That object has three methods returning boolean and taking "
"no argument: `enabled()`, `disabled()`, and `auto()`."
msgstr ""

#. type: Plain text
#: Build-options.md:94
#, no-wrap
msgid ""
"```meson\n"
"d = dependency('foo', required : get_option('myfeature'))\n"
"if d.found()\n"
"  app = executable('myapp', 'main.c', dependencies : [d])\n"
"endif\n"
"```\n"
msgstr ""

#. type: Plain text
#: Build-options.md:102
msgid ""
"If the value of a `feature` option is set to `auto`, that value is overriden "
"by the global `auto_features` option (which defaults to `auto`). This is "
"intended to be used by packagers who want to have full control on which "
"dependencies are required and which are disabled, and not rely on build-deps "
"being installed (at the right version) to get a feature enabled. They could "
"set `auto_features=enabled` to enable all features and disable explicitly "
"only the few they don't want, if any."
msgstr ""

#. type: Plain text
#: Build-options.md:104
msgid "This type is available since version 0.47.0"
msgstr ""

#. type: Plain text
#: Build-options.md:106
msgid "## Using build options"
msgstr "## ビルドオプションの利用"

#. type: Plain text
#: Build-options.md:110
msgid "```meson optval = get_option('opt_name')  ```"
msgstr ""
"```meson\n"
"optval = get_option('opt_name') \n"
"```"

#. type: Plain text
#: Build-options.md:114
msgid ""
"This function also allows you to query the value of Meson's built-in project "
"options. For example, to get the installation prefix you would issue the "
"following command:"
msgstr ""

#. type: Plain text
#: Build-options.md:118
msgid "```meson prefix = get_option('prefix')  ```"
msgstr ""
"```meson\n"
"prefix = get_option('prefix') \n"
"```"

#. type: Plain text
#: Build-options.md:123
msgid ""
"It should be noted that you can not set option values in your Meson scripts. "
"They have to be set externally with the `meson configure` command line tool. "
"Running `meson configure` without arguments in a build dir shows you all "
"options you can set."
msgstr ""

#. type: Plain text
#: Build-options.md:126
msgid "To change their values use the `-D` option:"
msgstr ""

#. type: Plain text
#: Build-options.md:130
msgid "```console $ meson configure -Doption=newvalue ```"
msgstr ""
"```console\n"
"$ meson configure -Doption=newvalue\n"
"```"

#. type: Plain text
#: Build-options.md:134
msgid ""
"Setting the value of arrays is a bit special. If you only pass a single "
"string, then it is considered to have all values separated by commas. Thus "
"invoking the following command:"
msgstr ""

#. type: Plain text
#: Build-options.md:138
msgid "```console $ meson configure -Darray_opt=foo,bar ```"
msgstr ""
"```console\n"
"$ meson configure -Darray_opt=foo,bar\n"
"```"

#. type: Plain text
#: Build-options.md:140
msgid "would set the value to an array of two elements, `foo` and `bar`."
msgstr ""

#. type: Plain text
#: Build-options.md:143
msgid ""
"If you need to have commas in your string values, then you need to pass the "
"value with proper shell quoting like this:"
msgstr ""

#. type: Plain text
#: Build-options.md:147
msgid "```console $ meson configure \"-Doption=['a,b', 'c,d']\" ```"
msgstr ""
"```console\n"
"$ meson configure \"-Doption=['a,b', 'c,d']\"\n"
"```"

#. type: Plain text
#: Build-options.md:150
msgid ""
"The inner values must always be single quotes and the outer ones double "
"quotes."
msgstr ""

#. type: Plain text
#: Build-options.md:153
msgid ""
"To change values in subprojects prepend the name of the subproject and a "
"colon:"
msgstr ""

#. type: Plain text
#: Build-options.md:157
#, fuzzy
msgid "```console $ meson configure -Dsubproject:option=newvalue ```"
msgstr ""
"```console\n"
"$ meson configure -Doption=newvalue\n"
"```"

#. type: Plain text
#: Build-options.md:161
#, no-wrap
msgid ""
"**NOTE:** If you cannot call `meson configure` you likely have a old\n"
"  version of Meson. In that case you can call `mesonconf` instead, but\n"
"  that is deprecated in newer versions\n"
msgstr ""

#. type: Plain text
#: Build-options.md:163
msgid "## Yielding to superproject option"
msgstr ""

#. type: Plain text
#: Build-options.md:168
msgid ""
"Suppose you have a master project and a subproject. In some cases it might "
"be useful to have an option that has the same value in both of them. This "
"can be achieved with the `yield` keyword. Suppose you have an option "
"definition like this:"
msgstr ""

#. type: Plain text
#: Build-options.md:172
msgid ""
"```meson option('some_option', type : 'string', value : 'value', yield : "
"true)  ```"
msgstr ""

#. type: Plain text
#: Build-options.md:179
msgid ""
"If you build this project on its own, this option behaves like usual. "
"However if you build this project as a subproject of another project which "
"also has an option called `some_option`, then calling `get_option` returns "
"the value of the superproject. If the value of `yield` is `false`, "
"`get_option` returns the value of the subproject's option."
msgstr ""

#. type: Plain text
#: Build-options.md:182
#, fuzzy
msgid "## Built-in build options"
msgstr "## ビルドオプションの利用"

#. type: Plain text
#: Build-options.md:185
msgid ""
"There are a number of built-in options. To get the current list execute "
"`meson configure` in the build directory."
msgstr ""

#. type: Plain text
#: Build-options.md:187
msgid "### Visual Studio"
msgstr ""

#. type: Plain text
#: Build-options.md:189
msgid "#### Startup project"
msgstr ""

#. type: Plain text
#: Build-options.md:193
msgid ""
"The backend\\_startup\\_project option can be set to define the default "
"project that will be executed with the \"Start debugging F5\" action in "
"visual studio.  It should be the same name as an executable target name."
msgstr ""

#. type: Plain text
#: Build-options.md:198
msgid ""
"```meson project('my_project', 'c', default_options: "
"['backend_startup_project=my_exe'])  executable('my_exe', ...)  ```"
msgstr ""

#. type: Plain text
#: Build-options.md:200
msgid "### Ninja"
msgstr ""

#. type: Plain text
#: Build-options.md:202
msgid "#### Max links"
msgstr ""

#. type: Plain text
#: Build-options.md:204
msgid ""
"The backend\\_max\\_links can be set to limit the number of processes that "
"ninja will use to link."
msgstr ""
