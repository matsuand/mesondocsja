# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-09-01 16:24+0900\n"
"PO-Revision-Date: 2017-09-30 21:44+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Running-Meson.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Running-Meson.md:4
msgid "short-description: Building a project with Meson ..."
msgstr ""
"short-description: Meson プロジェクトの構築\n"
"..."

#. type: Plain text
#: Running-Meson.md:6
msgid "# Running Meson"
msgstr "# Meson の実行"

#. type: Plain text
#: Running-Meson.md:12
msgid ""
"There are two different ways of invoking Meson. First, you can run it "
"directly from the source tree with the command `/path/to/source/meson.py`. "
"Meson may also be installed in which case the command is simply `meson`. In "
"this manual we only use the latter format for simplicity."
msgstr ""
"Meson を実行する方法は 2 つあります。1 つは、ソースツリーにおいて直接、コマン"
"ド `/path/to/source/meson.py` を実行することです。一方、Meson がインストール"
"されていれば、そのコマンドは単に `meson` となります。本マニュアルでは、説明を"
"簡単にするため、後者の方法のみを示していきます。"

#. type: Plain text
#: Running-Meson.md:15
msgid ""
"Additionally, the invocation can pass options to meson.  The list of options "
"is documented [here](Builtin-options.md)."
msgstr ""

#. type: Plain text
#: Running-Meson.md:20
msgid ""
"At the time of writing only a command line version of Meson is available. "
"This means that Meson must be invoked using the terminal. If you wish to use "
"the MSVC compiler, you need to run Meson under \"Visual Studio command prompt"
"\"."
msgstr ""
"本マニュアルの記述時点で、Meson はコマンドライン版のみが提供されています。つ"
"まり Meson はターミナル端末を使って実行することになります。MSVC コンパイラー"
"を利用している場合は、\"Visual Studio コマンドプロンプト\" から Meson を実行"
"します。"

#. type: Plain text
#: Running-Meson.md:22
#, no-wrap
msgid ""
"Configuring the source\n"
"==\n"
msgstr ""
"ソースの設定\n"
"==\n"

#. type: Plain text
#: Running-Meson.md:27
msgid ""
"Let us assume that we have a source tree that has a Meson build system. This "
"means that at the topmost directory has a file called `meson.build`. We run "
"the following commands to get the build started."
msgstr ""
"ここで Meson ビルドシステムを利用するソースツリーがあるものとします。このこと"
"はつまり、最上位のディレクトリに `meson.build` ファイルがあるということです。"
"ビルド実行は以下のコマンドにより行います。"

#. type: Plain text
#: Running-Meson.md:33
#, no-wrap
msgid ""
"    cd /path/to/source/root\n"
"    mkdir builddir\n"
"    cd builddir\n"
"    meson ..\n"
msgstr ""

#. type: Plain text
#: Running-Meson.md:37
msgid ""
"First we create a directory to hold all files generated during the build. "
"Then we go into it and invoke Meson, giving it the location of the source "
"root."
msgstr ""
"初めに、ビルドされるファイルを収容するディレクトリを生成します。そしてその"
"ディレクトリに移動して Meson を実行します。実行の際にはソースのルートディレク"
"トリを指定します。"

#. type: Plain text
#: Running-Meson.md:42
msgid ""
"Hint: The syntax of meson is `meson [options] [srcdir] [builddir]`, but you "
"may omit either `srcdir` or `builddir`. Meson will deduce the `srcdir` by "
"the location of `meson.build`. The other one will be your `pwd`."
msgstr ""
"ヒント： meson 実行の際の書式は `meson [options] [srcdir] [builddir]` です。"
"`srcdir` と `builddir` はいずれかを省略することもできます。その場合 `srcdir` "
"は、`meson.build` ファイルの位置により決定されます。また `builddir` は `pwd` "
"になります。"

#. type: Plain text
#: Running-Meson.md:47
msgid ""
"Meson then loads the build configuration file and writes the corresponding "
"build backend in the build directory. By default Meson generates a *debug "
"build*, which turns on basic warnings and debug information and disables "
"compiler optimizations."
msgstr ""

#. type: Plain text
#: Running-Meson.md:50
msgid ""
"You can specify a different type of build with the `--buildtype` command "
"line argument. It can have one of the following values."
msgstr ""

#. type: Plain text
#: Running-Meson.md:57
#, no-wrap
msgid ""
"| value            | meaning                                                                                                                                                    |\n"
"| ------           | --------                                                                                                                                                   |\n"
"| `plain`          | no extra build flags are used, even for compiler warnings, useful for distro packagers and other cases where you need to specify all arguments by yourself |\n"
"| `debug`          | debug info is generated but the result is not optimized, this is the default                                                                               |\n"
"| `debugoptimized` | debug info is generated and the code is optimized (on most compilers this means `-g -O2`)                                                                  |\n"
"| `release`        | full optimization, no debug info                                                                                                                           |\n"
msgstr ""
"| 値               | 意味                                                                                                                                                       |\n"
"| ------           | --------                                                                                                                                                   |\n"
"| `plain`          | no extra build flags are used, even for compiler warnings, useful for distro packagers and other cases where you need to specify all arguments by yourself |\n"
"| `debug`          | debug info is generated but the result is not optimized, this is the default                                                                               |\n"
"| `debugoptimized` | debug info is generated and the code is optimized (on most compilers this means `-g -O2`)                                                                  |\n"
"| `release`        | full optimization, no debug info                                                                                                                           |\n"

#. type: Plain text
#: Running-Meson.md:67
msgid ""
"The build directory is mandatory. The reason for this is that it simplifies "
"the build process immensely. Meson will not under any circumstances write "
"files inside the source directory (if it does, it is a bug and should be "
"fixed). This means that the user does not need to add a bunch of files to "
"their revision control's ignore list. It also means that you can create "
"arbitrarily many build directories for any given source tree. If we wanted "
"to test building the source code with the Clang compiler instead of the "
"system default, we could just type the following commands."
msgstr ""

#. type: Plain text
#: Running-Meson.md:72
#, no-wrap
msgid ""
"    cd /path/to/source/root\n"
"    mkdir buildclang\n"
"    cd buildclang\n"
"    CC=clang CXX=clang++ meson ..\n"
msgstr ""

#. type: Plain text
#: Running-Meson.md:80
msgid ""
"This separation is even more powerful if your code has multiple "
"configuration options (such as multiple data backends). You can create a "
"separate subdirectory for each of them. You can also have build directories "
"for optimized builds, code coverage, static analysis and so on. They are all "
"neatly separated and use the same source tree. Changing between different "
"configurations is just a question of changing to the corresponding directory."
msgstr ""

#. type: Plain text
#: Running-Meson.md:83
msgid ""
"Unless otherwise mentioned, all following command line invocations are meant "
"to be run in the build directory."
msgstr ""

#. type: Plain text
#: Running-Meson.md:88
msgid ""
"By default Meson will use the Ninja backend to build your project. If you "
"wish to use any of the other backends, you need to pass the corresponding "
"argument during configuration time. As an example, here is how you would use "
"Meson to generate a Visual studio solution."
msgstr ""

#. type: Plain text
#: Running-Meson.md:90
#, no-wrap
msgid "    meson <source dir> <build dir> --backend=vs2010\n"
msgstr ""

#. type: Plain text
#: Running-Meson.md:94
msgid ""
"You can then open the generated solution with Visual Studio and compile it "
"in the usual way. A list of backends can be obtained with `meson --help`."
msgstr ""

#. type: Plain text
#: Running-Meson.md:96
#, no-wrap
msgid ""
"Building the source\n"
"==\n"
msgstr ""
"ソースの構築\n"
"==\n"

#. type: Plain text
#: Running-Meson.md:101
msgid ""
"If you are not using an IDE, Meson uses the [Ninja build system](https://"
"ninja-build.org/) to actually build the code. To start the build, simply "
"type the following command."
msgstr ""

#. type: Plain text
#: Running-Meson.md:103
#, no-wrap
msgid "    ninja\n"
msgstr ""

#. type: Plain text
#: Running-Meson.md:109
msgid ""
"The main usability difference between Ninja and Make is that Ninja will "
"automatically detect the number of CPUs in your computer and parallelize "
"itself accordingly. You can override the amount of parallel processes used "
"with the command line argument `-j <num processes>`."
msgstr ""

#. type: Plain text
#: Running-Meson.md:119
msgid ""
"It should be noted that after the initial configure step `ninja` is the only "
"command you ever need to type to compile. No matter how you alter your "
"source tree (short of moving it to a completely new location), Meson will "
"detect the changes and regenerate itself accordingly. This is especially "
"handy if you have multiple build directories. Often one of them is used for "
"development (the \"debug\" build) and others only every now and then (such "
"as a \"static analysis\" build). Any configuration can be built just by "
"`cd`'ing to the corresponding directory and running Ninja."
msgstr ""

#. type: Plain text
#: Running-Meson.md:121
#, no-wrap
msgid ""
"Running tests\n"
"==\n"
msgstr ""
"テストの実行\n"
"==\n"

#. type: Plain text
#: Running-Meson.md:125
msgid ""
"Meson provides native support for running tests. The command to do that is "
"simple."
msgstr ""

#. type: Plain text
#: Running-Meson.md:127
#, no-wrap
msgid "    ninja test\n"
msgstr ""

#. type: Plain text
#: Running-Meson.md:130
msgid ""
"Meson does not force the use of any particular testing framework. You are "
"free to use GTest, Boost Test, Check or even custom executables."
msgstr ""

#. type: Plain text
#: Running-Meson.md:132
#, no-wrap
msgid ""
"Installing\n"
"==\n"
msgstr ""
"インストール\n"
"==\n"

#. type: Plain text
#: Running-Meson.md:135
msgid "Installing the built software is just as simple."
msgstr ""
"ビルドしたソフトウェアのインストールは、以下のような単純なコマンド実行により"
"行います。"

#. type: Plain text
#: Running-Meson.md:137
#, no-wrap
msgid "    ninja install\n"
msgstr ""

#. type: Plain text
#: Running-Meson.md:140
msgid ""
"Note that Meson will only install build targets explicitly tagged as "
"installable, as detailed in the [installing targets documentation]"
"(Installing.md)."
msgstr ""

#. type: Plain text
#: Running-Meson.md:145
msgid ""
"By default Meson installs to `/usr/local`. This can be changed by passing "
"the command line argument `--prefix /your/prefix` to Meson during configure "
"time. Meson also supports the `DESTDIR` variable used in e.g. building "
"packages. It is used like this:"
msgstr ""

#. type: Plain text
#: Running-Meson.md:147
#, no-wrap
msgid "    DESTDIR=/path/to/staging ninja install\n"
msgstr ""

#. type: Plain text
#: Running-Meson.md:149
#, no-wrap
msgid ""
"Command line help\n"
"==\n"
msgstr ""
"コマンドラインヘルプ\n"
"==\n"

#. type: Plain text
#: Running-Meson.md:153
msgid ""
"Meson has a standard command line help feature. It can be accessed with the "
"following command."
msgstr ""
"Meson には標準的なコマンドラインヘルプの機能があります。以下のコマンドによっ"
"てヘルプを表示します。"

#. type: Plain text
#: Running-Meson.md:155
#, no-wrap
msgid "    meson --help\n"
msgstr ""

#. type: Plain text
#: Running-Meson.md:157
#, no-wrap
msgid ""
"Exit status\n"
"==\n"
msgstr ""

#. type: Plain text
#: Running-Meson.md:160
msgid ""
"Meson exits with status 0 if successful, 1 for problems with the command "
"line or meson.build file, and 2 for internal errors."
msgstr ""
