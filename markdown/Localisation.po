# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-09-30 21:44+0900\n"
"PO-Revision-Date: 2017-09-30 21:44+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Localisation.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Localisation.md:4
msgid "short-description: Localization with GNU Gettext ..."
msgstr ""

#. type: Plain text
#: Localisation.md:6
msgid "# Localisation"
msgstr ""

#. type: Plain text
#: Localisation.md:8
msgid ""
"Localising your application with GNU gettext takes a little effort but is "
"quite straightforward. This documentation assumes that you have a `po` "
"subdirectory at your project root directory that contains all the "
"localisation info."
msgstr ""

#. type: Plain text
#: Localisation.md:10
msgid ""
"The first thing you need is a file called `POTFILES`. It lists all the "
"source files that gettext should scan in order to find strings to translate. "
"The syntax of the file is one line per source file and the line must contain "
"the relative path from source root. A sample POTFILES might look like this."
msgstr ""

#. type: Plain text
#: Localisation.md:15
#, no-wrap
msgid ""
"    src/file1.c\n"
"    src/file2.c\n"
"    src/subdir/file3.c\n"
"    include/mything/somefile.h\n"
msgstr ""

#. type: Plain text
#: Localisation.md:17
msgid ""
"We also need to define an array of strings containing all the locales we "
"want to generate. This is done in the Meson file in the `po` subdirectory. "
"Assuming we want to generate Finnish and German localisations, the "
"definition would look like this."
msgstr ""

#. type: Plain text
#: Localisation.md:21
msgid "```meson langs = ['fi', 'de'] ```"
msgstr ""

#. type: Plain text
#: Localisation.md:23
msgid ""
"Then we need to generate the main pot file. Usually this is generated "
"manually or exists already. If not, see later on how to generate it using "
"Meson. The potfile can have any name but is usually the name of the gettext "
"package. Let's say the project is called *intltest*. In this case the "
"corresponding pot file would be called `intltest.pot`."
msgstr ""

#. type: Plain text
#: Localisation.md:25
msgid ""
"For each language listed in the array above we need a corresponding `.po` "
"file. This has to be generated manually, see the gettext manual for details. "
"Once we have all this, we can define the localisation to Meson with these "
"lines."
msgstr ""

#. type: Plain text
#: Localisation.md:31
msgid ""
"```meson i18n = import('i18n')  langs = ['fi', 'de'] i18n."
"gettext('intltest', languages : langs)  ```"
msgstr ""

#. type: Plain text
#: Localisation.md:33
msgid ""
"The first command imports the `i18n` module that provides gettext features. "
"The third line does the actual invocation. The first argument is the gettext "
"package name. This causes two things to happen. The first is that Meson will "
"generate binary mo files and put them to their proper locations when doing "
"an install. The second is that it creates a build rule to regenerate the "
"main pot file. If you are using the Ninja backend, this is how you would "
"invoke the rebuild."
msgstr ""

#. type: Plain text
#: Localisation.md:37
msgid "```console $ ninja intltest-pot ```"
msgstr ""

#. type: Plain text
#: Localisation.md:39
msgid ""
"If the pot file does not yet exist, it will be created. It is recommended to "
"inspect it manually afterwards and fill in e.g. proper copyright and contact "
"information."
msgstr ""

#. type: Plain text
#: Localisation.md:40
msgid ""
"Meson does not currently have built in commands for generating po files from "
"the pot file. This is because translations are usually done by people who "
"are not developers and thus have their own workflows."
msgstr ""
