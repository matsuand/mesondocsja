# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-09-01 15:59+0900\n"
"PO-Revision-Date: 2017-09-30 21:44+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Localisation.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Localisation.md:4
msgid "short-description: Localization with GNU Gettext ..."
msgstr ""

#. type: Plain text
#: Localisation.md:6
msgid "# Localisation"
msgstr ""

#. type: Plain text
#: Localisation.md:8
msgid ""
"Localising your application with GNU gettext takes a little effort but is "
"quite straightforward. We'll create a `po` subdirectory at your project root "
"directory for all the localisation info."
msgstr ""

#. type: Plain text
#: Localisation.md:11
msgid ""
"## Generating .pot and .po files In your main meson.build file include the "
"`po` subdirectory in the build proces."
msgstr ""

#. type: Plain text
#: Localisation.md:13
#, no-wrap
msgid "    subdir('po')\n"
msgstr ""

#. type: Plain text
#: Localisation.md:18
msgid ""
"In this `po` subdirectory we need: - `LINGUAS`: Space separated list of "
"languages - `POTFILES`: List of source files to scan for translatable "
"strings.  - `meson.build`: Localization specific meson file"
msgstr ""

#. type: Plain text
#: Localisation.md:21
msgid ""
"### LINGUAS File with space separated list of languages. A sample LINGUAS "
"might look like this."
msgstr ""

#. type: Plain text
#: Localisation.md:23
#, no-wrap
msgid "    aa ab ae af\n"
msgstr ""

#. type: Plain text
#: Localisation.md:26
msgid ""
"### POTFILES File that lists all the source files that gettext should scan "
"in order to find strings to translate. The syntax of the file is one line "
"per source file and the line must contain the relative path from source "
"root. A sample POTFILES might look like this."
msgstr ""

#. type: Plain text
#: Localisation.md:31
#, no-wrap
msgid ""
"    src/file1.c\n"
"    src/file2.c\n"
"    src/subdir/file3.c\n"
"    include/mything/somefile.h\n"
msgstr ""

#. type: Plain text
#: Localisation.md:43
#, no-wrap
msgid ""
"### meson.build\n"
"Localization specific meson file. It imports and uses the `i18n` module. If not defined before it needs to define the `GETTEXT_PACKAGE` global.\n"
"```meson\n"
"i18n = import('i18n')\n"
"# define GETTEXT_PACKAGE\n"
"add_project_arguments('-DGETTEXT_PACKAGE=\"intltest\"', language:'c')\n"
"i18n.gettext(meson.project_name(),\n"
"    args: '--directory=' + meson.source_root()\n"
")\n"
"```\n"
"The first command imports the `i18n` module that provides gettext features. The fourth line does the actual invocation. The first argument is the gettext package name. This causes two things to happen. The first is that Meson will generate binary mo files and put them to their proper locations when doing an install. The second is that it creates a build rule to regenerate the main pot file. If you are using the Ninja backend, this is how you would invoke the rebuild.\n"
msgstr ""

#. type: Plain text
#: Localisation.md:45
msgid "### generate .pot file"
msgstr ""

#. type: Plain text
#: Localisation.md:47
msgid ""
"Then we need to generate the main pot file. The potfile can have any name "
"but is usually the name of the gettext package. Let's say the project is "
"called *intltest*. In this case the corresponding pot file would be called "
"`intltest.pot`."
msgstr ""

#. type: Plain text
#: Localisation.md:49
msgid ""
"Run the following command from your build folder to generate the pot file. "
"It is recommended to inspect it manually afterwards and fill in e.g. proper "
"copyright and contact information."
msgstr ""

#. type: Plain text
#: Localisation.md:53
msgid "```console $ ninja intltest-pot ```"
msgstr ""

#. type: Plain text
#: Localisation.md:55
msgid "### generate .po files"
msgstr ""

#. type: Plain text
#: Localisation.md:57
msgid ""
"For each language listed in the array above we need a corresponding `.po` "
"file. Those can be generated by running the following command from your "
"build folder."
msgstr ""

#. type: Plain text
#: Localisation.md:60
msgid "```console $ ninja intltest-update-po ```"
msgstr ""
