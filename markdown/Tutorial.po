# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-09-30 21:44+0900\n"
"PO-Revision-Date: 2017-09-30 21:44+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Tutorial.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Tutorial.md:4
msgid "short-description: Simplest tutorial ..."
msgstr "short-description: 簡単なチュートリアル\n..."

#. type: Plain text
#: Tutorial.md:6
msgid "# Tutorial"
msgstr "# チュートリアル"

#. type: Plain text
#: Tutorial.md:11
msgid ""
"This page shows from the ground up how to create a Meson build definition "
"for a simple project. Then we expand it to use external dependencies to show "
"how easily they can be integrated into your project."
msgstr ""
"このページでは、単純なプロジェクトに対しての Meson ビルド定義（Meson "
"build definition）を新規に生成するところから始めます。そして外部の依存"
"モジュールを利用するように拡張します。この様子から、プロジェクトの統合"
"が簡単にできることがわかります。"

#. type: Plain text
#: Tutorial.md:13
#, no-wrap
msgid ""
"The humble beginning\n"
"-----\n"
msgstr ""
"単純な例から\n"
"-----\n"

#. type: Plain text
#: Tutorial.md:18
msgid ""
"Let's start with the most basic of programs, the classic hello example. "
"First we create a file `main.c` which holds the source. It looks like this."
msgstr ""
"最も基本的なプログラムから始めます。いつもの hello プログラムです。"
"まずはソースコードを記述した `main.c` ファイルを生成します。これは"
"以下のようなものです。"

#. type: Plain text
#: Tutorial.md:21
msgid "```c #include<stdio.h>"
msgstr "```c\n#include<stdio.h>"

#. type: Plain text
#: Tutorial.md:27
#, no-wrap
msgid ""
"int main(int argc, char **argv) {\n"
"  printf(\"Hello there.\\n\");\n"
"  return 0;\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: Tutorial.md:30
msgid ""
"Then we create a Meson build description and put it in a file called `meson."
"build` in the same directory. Its contents are the following."
msgstr ""
"そして Meson ビルド定義を作り上げて、同一ディレクトリ内に `meson."
"build` というファイルとして生成します。その内容は以下のとおりです。"

#. type: Plain text
#: Tutorial.md:35
msgid "```meson project('tutorial', 'c')  executable('demo', 'main.c')  ```"
msgstr "```meson\nproject('tutorial', 'c') \nexecutable('demo', 'main.c') \n```"

#. type: Plain text
#: Tutorial.md:39
msgid ""
"That is all. We are now ready to build our application. First we need to "
"initialize the build by going into the source directory and issuing the "
"following commands."
msgstr ""
"記述はたったこれだけです。アプリケーションをビルドする準備は、これで"
"できてしまいました。まずはビルドのための初期化が必要なので、ソースディ"
"レクトリに移動して、以下のコマンドを実行します。"

#. type: Plain text
#: Tutorial.md:43
msgid "```console $ meson builddir ```"
msgstr "```console\n$ meson builddir\n```"

#. type: Plain text
#: Tutorial.md:49
msgid ""
"We create a separate build directory to hold all of the compiler output. "
"Meson is different from some other build systems in that it does not permit "
"in-source builds. You must always create a separate build directory. Common "
"convention is to put the default build directory in a subdirectory of your "
"top level source directory."
msgstr ""
"ビルドディレクトリが 1 つ生成されて、コンパイラーの出力はここに収めら"
"れます。Meson は他のビルドシステムとは異なり、ソースディレクトリ内での"
"ビルドは許可されません。常にビルドディレクトリを用意することが必要です。"
"通常は慣例として、ソースディレクトリ最上位のサブディレクトリとします。"

#. type: Plain text
#: Tutorial.md:51
msgid "When Meson is run it prints the following output."
msgstr "Meson を実行すると、以下のように出力されます。"

#. type: Plain text
#: Tutorial.md:60
#, no-wrap
msgid ""
"    The Meson build system\n"
"     version: 0.13.0-research\n"
"    Source dir: /home/jpakkane/mesontutorial\n"
"    Build dir: /home/jpakkane/mesontutorial/builddir\n"
"    Build type: native build\n"
"    Project name is \"tutorial\".\n"
"    Using native c compiler \"ccache cc\". (gcc 4.8.2)\n"
"    Creating build target \"demo\" with 1 files.\n"
msgstr ""

#. type: Plain text
#: Tutorial.md:62
msgid "Now we are ready to build our code."
msgstr "これによりプログラムのビルドができたことになります。"

#. type: Plain text
#: Tutorial.md:67
msgid "``` $ cd builddir $ ninja ```"
msgstr "```\n$ cd builddir\n$ ninja\n```"

#. type: Plain text
#: Tutorial.md:69
msgid "Once that is done we can run the resulting binary."
msgstr "これを行ったら、生成されたバイナリーを以下のように実行します。"

#. type: Plain text
#: Tutorial.md:73
msgid "```console $ ./demo ```"
msgstr "```console\n$ ./demo\n```"

#. type: Plain text
#: Tutorial.md:75
msgid "This produces the expected output."
msgstr "期待どおりに出力が得られます。"

#. type: Plain text
#: Tutorial.md:77
#, no-wrap
msgid "    Hello there.\n"
msgstr ""

#. type: Plain text
#: Tutorial.md:79
#, no-wrap
msgid ""
"Adding dependencies\n"
"-----\n"
msgstr ""
"依存モジュールの追加\n"
"-----\n"

#. type: Plain text
#: Tutorial.md:85
msgid ""
"Just printing text is a bit old fashioned. Let's update our program to "
"create a graphical window instead. We'll use the [GTK+](https://gtk.org) "
"widget toolkit. First we edit the main file to use GTK+. The new version "
"looks like this."
msgstr ""
"テキストを出力するだけなのは、なんとも古いやり方です。ここからはこのプ"
"ログラムを、グラフィックウィンドウを用いたものに作り変えます。ここでは "
"[GTK+](https://gtk.org) ウィジェットツールキットを利用します。まずはメ"
"インプログラムが GTK+ を利用するように修正します。新たなプログラムは以"
"下のようになります。"

#. type: Plain text
#: Tutorial.md:88
msgid "```c #include<gtk/gtk.h>"
msgstr "```c\n#include<gtk/gtk.h>"

#. type: Plain text
#: Tutorial.md:99
#, no-wrap
msgid ""
"int main(int argc, char **argv) {\n"
"  GtkWidget *win;\n"
"  gtk_init(&argc, &argv);\n"
"  win = gtk_window_new(GTK_WINDOW_TOPLEVEL);\n"
"  gtk_window_set_title(GTK_WINDOW(win), \"Hello there\");\n"
"  g_signal_connect(win, \"destroy\", G_CALLBACK(gtk_main_quit), NULL);\n"
"  gtk_widget_show(win);\n"
"  gtk_main();\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: Tutorial.md:102
msgid ""
"Then we edit the Meson file, instructing it to find and use the GTK+ "
"libraries."
msgstr ""
"そして Meson ビルド定義を編集します。GTK+ ライブラリを検索して利用でき"
"るように指示します。"

#. type: Plain text
#: Tutorial.md:108
msgid ""
"```meson project('tutorial', 'c')  gtkdep = dependency('gtk+-3.0')  "
"executable('demo', 'main.c', dependencies : gtkdep)  ```"
msgstr ""
"```meson\nproject('tutorial', 'c') \ngtkdep = dependency('gtk+-3.0') \n"
"executable('demo', 'main.c', dependencies : gtkdep) \n```"

#. type: Plain text
#: Tutorial.md:113
msgid ""
"Now we are ready to build. The thing to notice is that we do *not* need to "
"recreate our build directory, run any sort of magical commands or the like. "
"Instead we just type the exact same command as if we were rebuilding our "
"code without any build system changes."
msgstr ""
"ビルドができるようになりました。念のため説明しておきますが、ビルドディ"
"レクトリは再度生成する必要もなく、特別なコマンドなどを実行する必要もあ"
"りません。先ほどとまったく同じコマンドを実行するだけです。ビルド方法の"
"どこも変わっていないかのように、ただビルドするだけです。"

#. type: Plain text
#: Tutorial.md:117
msgid "``` $ ninja ```"
msgstr "```\n$ ninja\n```"

#. type: Plain text
#: Tutorial.md:123
msgid ""
"Once you have set up your build directory the first time, you don't ever "
"need to run the `meson` command again. You always just run `ninja`. Meson "
"will automatically detect when you have done changes to build definitions "
"and will take care of everything so users don't have to care. In this case "
"the following output is produced."
msgstr ""
"初めにビルドディレクトリを生成しておけば、`meson` コマンドを実行する必"
"要はなくなり、その後は `ninja` を実行します。Meson はビルド定義に加え"
"られた変更を自動検知して、すべてを考慮した動作を行います。したがってユ"
"ーザーは何も気にする必要はありません。上のコマンド実行からは、以下の出"
"力が得られます。"

#. type: Plain text
#: Tutorial.md:137
#, no-wrap
msgid ""
"    [1/1] Regenerating build files\n"
"    The Meson build system\n"
"     version: 0.13.0-research\n"
"    Source dir: /home/jpakkane/mesontutorial\n"
"    Build dir: /home/jpakkane/mesontutorial/builddir\n"
"    Build type: native build\n"
"    Project name is \"tutorial\".\n"
"    Using native c compiler \"ccache cc\". (gcc 4.8.2)\n"
"    Found pkg-config version 0.26.\n"
"    Dependency gtk+-3.0 found: YES\n"
"    Creating build target \"demo\" with 1 files.\n"
"    [1/2] Compiling c object demo.dir/main.c.o\n"
"    [2/2] Linking target demo\n"
msgstr ""

#. type: Plain text
#: Tutorial.md:140
msgid ""
"Note how Meson noticed that the build definition has changed and reran "
"itself automatically. The program is now ready to be run:"
msgstr ""
"この出力から Meson がビルド定義の変更を検知して自動的に再ビルドを行っ"
"ている様子がわかります。実行プログラムは以下のようにして実行します。"

#. type: Plain text
#: Tutorial.md:144
msgid "``` $ ./demo ```"
msgstr "```\n$ ./demo\n```"

#. type: Plain text
#: Tutorial.md:146
msgid "This creates the following GUI application."
msgstr "プログラム実行によって、以下のような GUI アプリケーションが表示"
"されます。"

#. type: Plain text
#: Tutorial.md:147
msgid "![GTK+ sample application screenshot](images/gtksample.png)"
msgstr ""
