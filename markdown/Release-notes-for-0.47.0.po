# Japanese translations for PACKAGE package
# Copyright (C) 2018 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-09-04 12:03+0900\n"
"PO-Revision-Date: 2018-09-04 12:03+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Release-notes-for-0.47.0.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:5
msgid "title: Release 0.47\nshort-description: Release notes for 0.47 ..."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:7
msgid "# New features"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:9
msgid "## Allow early return from a script"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:14
msgid ""
"Added the function `subdir_done()`. Its invocation exits the current script "
"at the point of invocation. All previously invoked build targets and "
"commands are build/executed. All following ones are ignored. If the current "
"script was invoked via `subdir()` the parent script continues normally."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:16
msgid "## Concatenate string literals returned from `get_define()`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:20
msgid ""
"After obtaining the value of a preprocessor symbol consecutive string "
"literals are merged into a single string literal.  For example a "
"preprocessor symbol's value `\"ab\" \"cd\"` is returned as `\"abcd\"`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:22
msgid "## ARM compiler(version 6) for C and CPP"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:31
msgid ""
"Cross-compilation is now supported for ARM targets using ARM compiler "
"version 6 - ARMCLANG.  The required ARMCLANG compiler options for building a "
"shareable library are not included in the current Meson implementation for "
"ARMCLANG support, so it can not build shareable libraries.  This current "
"Meson implementation for ARMCLANG support can not build assembly files with "
"arm syntax (we need to use armasm instead of ARMCLANG for the `.s` files "
"with this syntax) and only supports GNU syntax."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:36
msgid ""
"The default extension of the executable output is `.axf`.  The environment "
"path should be set properly for the ARM compiler executables.  The `--"
"target`, `-mcpu` options with the appropriate values should be mentioned in "
"the cross file as shown in the snippet below."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:41
#, no-wrap
msgid ""
"```\n"
"[properties]\n"
"c_args      = ['--target=arm-arm-none-eabi', '-mcpu=cortex-m0plus']\n"
"cpp_args    = ['--target=arm-arm-none-eabi', '-mcpu=cortex-m0plus']\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:43
msgid "```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:49
#, no-wrap
msgid ""
"Note:\n"
"- The current changes are tested on Windows only.\n"
"- PIC support is not enabled by default for ARM,\n"
"  if users want to use it, they need to add the required arguments\n"
"  explicitly from cross-file(`c_args`/`cpp_args`) or some other way.\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:51
msgid "## New base build option for LLVM (Apple) bitcode support"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:56
msgid ""
"When building with clang on macOS, you can now build your static and shared "
"binaries with embedded bitcode by enabling the `b_bitcode` [base option]"
"(Builtin-options.md#Base_options) by passing `-Db_bitcode=true` to Meson."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:61
msgid ""
"This is better than passing the options manually in the environment since "
"Meson will automatically disable conflicting options such as `b_asneeded`, "
"and will disable bitcode support on targets that don't support it such as "
"`shared_module()`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:65
msgid ""
"Since this requires support in the linker, it is currently only enabled when "
"using Apple ld. In the future it can be extended to clang on other platforms "
"too."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:67
msgid "## New compiler check: `check_header()`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:70
msgid ""
"The existing compiler check `has_header()` only checks if the header exists, "
"either with the `__has_include` C++11 builtin, or by running the pre-"
"processor."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:75
msgid ""
"However, sometimes the header you are looking for is unusable on some "
"platforms or with some compilers in a way that is only detectable at compile-"
"time. For such cases, you should use `check_header()` which will include the "
"header and run a full compile."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:78
msgid ""
"Note that `has_header()` is much faster than `check_header()`, so it should "
"be used whenever possible."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:80
msgid "## New action `copy:` for `configure_file()`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:86
msgid ""
"In addition to the existing actions `configuration:` and `command:`, "
"[`configure_file()`](#Reference-manual.md#configure_file) now accepts a "
"keyword argument `copy:` which specifies a new action to copy the file "
"specified with the `input:` keyword argument to a file in the build "
"directory with the name specified with the `output:` keyword argument."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:89
msgid ""
"These three keyword arguments are, as before, mutually exclusive. You can "
"only do one action at a time."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:91
msgid "## New keyword argument `encoding:` for `configure_file()`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:95
msgid ""
"Add a new keyword to [`configure_file()`](#Reference-manual."
"md#configure_file)  that allows the developer to specify the input and "
"output file encoding. The default value is the same as before: UTF-8."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:100
msgid ""
"In the past, Meson would not handle non-UTF-8/ASCII files correctly, and in "
"the worst case would try to coerce it to UTF-8 and mangle the data. UTF-8 is "
"the standard encoding now, but sometimes it is necessary to process files "
"that use a different encoding."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:102
msgid ""
"For additional details see [#3135](https://github.com/mesonbuild/meson/"
"pull/3135)."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:104
msgid "## New keyword argument `output_format:` for `configure_file()`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:108
msgid ""
"When called without an input file, `configure_file` generates a C header "
"file by default. A keyword argument was added to allow specifying the output "
"format, for example for use with nasm or yasm:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:112
msgid "``` conf = configuration_data()  conf.set('FOO', 1)"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:117
#, no-wrap
msgid ""
"configure_file('config.asm',\n"
"  configuration: conf,\n"
"  output_format: 'nasm')\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:119
msgid "## Substitutions in `custom_target(depfile:)`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:122
msgid ""
"The `depfile` keyword argument to `custom_target` now accepts the "
"`@BASENAME@` and `@PLAINNAME@` substitutions."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:124
msgid "## Deprecated `build_always:` for custom targets"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:129
msgid ""
"Setting `build_always` to `true` for a custom target not only marks the "
"target to be always considered out of date, but also adds it to the set of "
"default targets. This option is therefore deprecated and the new option "
"`build_always_stale` is introduced."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:133
msgid ""
"`build_always_stale` *only* marks the target to be always considered out of "
"date, but does not add it to the set of default targets. The old behaviour "
"can be achieved by combining `build_always_stale` with `build_by_default`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:135
msgid "The documentation has been updated accordingly."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:137
msgid "## New built-in object type: dictionary"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:142
msgid ""
"Meson dictionaries use a syntax similar to python's dictionaries, but have a "
"narrower scope: they are immutable, keys can only be string literals, and "
"initializing a dictionary with duplicate keys causes a fatal error."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:144
msgid "Example usage:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:147
msgid "```meson d = {'foo': 42, 'bar': 'baz'}"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:150
msgid "foo = d.get('foo')  foobar = d.get('foobar', 'fallback-value')"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:155
#, no-wrap
msgid ""
"foreach key, value : d\n"
"  Do something with key and value\n"
"endforeach\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:157
msgid "## Array options treat `-Dopt=` and `-Dopt=[]` as equivalent"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:161
msgid ""
"Prior to this change passing -Dopt= to an array opt would be interpreted as "
"`['']` (an array with an empty string), now `-Dopt=` is the same as `-"
"Dopt=[]`, an empty list."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:163
msgid "## Feature detection based on `meson_version:` in `project()`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:167
msgid ""
"Meson will now print a `WARNING:` message during configuration if you use a "
"function or a keyword argument that was added in a meson version that's "
"newer than the version specified inside `project()`. For example:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:170
msgid "```meson project('featurenew', meson_version: '>=0.43')"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:175
msgid ""
"cdata = configuration_data()  cdata.set('FOO', 'bar')  message(cdata."
"get_unquoted('FOO'))  ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:177
msgid "This will output:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:194
#, no-wrap
msgid ""
"```\n"
"The Meson build system\n"
"Version: 0.47.0.dev1\n"
"Source dir: C:\\path\\to\\srctree\n"
"Build dir: C:\\path\\to\\buildtree\n"
"Build type: native build\n"
"Project name: featurenew\n"
"Project version: undefined\n"
"Build machine cpu family: x86_64\n"
"Build machine cpu: x86_64\n"
"WARNING: Project targetting '>=0.43' but tried to use feature introduced in '0.44.0': configuration_data.get_unquoted()\n"
"Message: bar\n"
"Build targets in project: 0\n"
"WARNING: Project specifies a minimum meson_version '>=0.43' which conflicts with:\n"
" * 0.44.0: {'configuration_data.get_unquoted()'}\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:196
msgid "## New type of build option for features"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:202
msgid ""
"A new type of [option called `feature`](Build-options.md#features) can be "
"defined in `meson_options.txt` for the traditional `enabled / disabled / "
"auto` tristate. The value of this option can be passed to the `required` "
"keyword argument of functions `dependency()`, `find_library()`, "
"`find_program()` and `add_languages()`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:206
msgid ""
"A new global option `auto_features` has been added to override the value of "
"all `auto` features. It is intended to be used by packagers to have full "
"control on which feature must be enabled or disabled."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:208
msgid "## New options to `gnome.gdbus_codegen()`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:211
msgid ""
"You can now pass additional arguments to gdbus-codegen using the "
"`extra_args` keyword. This is the same for the other gnome function calls."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:214
msgid ""
"Meson now automatically adds autocleanup support to the generated code. This "
"can be modified by setting the autocleanup keyword."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:216
msgid "For example:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:223
#, no-wrap
msgid ""
"```meson\n"
"sources += gnome.gdbus_codegen('com.mesonbuild.Test',\n"
"  'com.mesonbuild.Test.xml',\n"
"  autocleanup : 'none',\n"
"  extra_args : ['--pragma-once'])\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:225
msgid "## Made 'install' a top level Meson command"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:230
msgid ""
"You can now run `meson install` in your build directory and it will do the "
"install. It has several command line options you can toggle the behaviour "
"that is not in the default `ninja install` invocation. This is similar to "
"how `meson test` already works."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:232
msgid "For example, to install only the files that have changed, you can do:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:236
msgid "```console $ meson install --only-changed ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:238
msgid "## `install_mode:` keyword argument extended to all installable targets"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:242
msgid ""
"It is now possible to pass an `install_mode` argument to all installable "
"targets, such as `executable()`, libraries, headers, man pages and custom/"
"generated targets."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:245
msgid ""
"The `install_mode` argument can be used to specify the file mode in symbolic "
"format and optionally the owner/uid and group/gid for the installed files."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:247
msgid "## New built-in option `install_umask` with a default value 022"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:251
msgid ""
"This umask is used to define the default permissions of files and "
"directories created in the install tree. Files will preserve their "
"executable mode, but the exact permissions will obey the `install_umask`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:253
msgid "The `install_umask` can be overridden in the meson command-line:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:257
msgid "```console $ meson --install-umask=027 builddir/ ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:259
msgid "A project can also override the default in the `project()` call:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:264
#, no-wrap
msgid ""
"```meson\n"
"project('myproject', 'c',\n"
"  default_options : ['install_umask=027'])\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:267
msgid ""
"To disable the `install_umask`, set it to `preserve`, in which case "
"permissions are copied from the files in their origin."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:269
msgid "## Octal and binary string literals"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:271
msgid ""
"Octal and binary integer literals can now be used in build and option files."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:276
msgid "```meson int_493 = 0o755 int_1365 = 0b10101010101 ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:278
msgid "## New keyword arguments: 'check' and 'capture' for `run_command()`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:281
msgid ""
"If `check:` is `true`, then the configuration will fail if the command "
"returns a non-zero exit status. The default value is `false` for "
"compatibility reasons."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:286
msgid ""
"`run_command()` used to always capture the output and stored it for use in "
"build files. However, sometimes the stdout is in a binary format which is "
"meant to be discarded. For that case, you can now set the `capture:` keyword "
"argument to `false`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:288
msgid "## Windows resource files dependencies"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:291
msgid ""
"The `compile_resources()` function of the `windows` module now takes the "
"`depend_files:` and `depends:` keywords."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:294
msgid ""
"When using binutils's `windres`, dependencies on files `#include`'d by the "
"preprocessor are now automatically tracked."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:296
msgid "## Polkit support for privileged installation"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:300
msgid ""
"When running `install`, if installation fails with a permission error and "
"`pkexec` is available, Meson will attempt to use it to spawn a permission "
"dialog for privileged installation and retry the installation."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.47.0.md:302
msgid ""
"If `pkexec` is not available, the old behaviour is retained and you will "
"need to explicitly run the install step with `sudo`."
msgstr ""
