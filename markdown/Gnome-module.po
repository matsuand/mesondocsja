# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-10-09 12:05+0900\n"
"PO-Revision-Date: 2017-09-30 21:43+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Gnome-module.md:2
msgid "# GNOME module"
msgstr "# GNOME モジュール"

#. type: Plain text
#: Gnome-module.md:5
msgid ""
"This module provides helper tools for build operations needed when building "
"Gnome/GLib programs."
msgstr ""

#. type: Plain text
#: Gnome-module.md:12
#, no-wrap
msgid ""
"**Note**: the compilation commands here might not work properly when\n"
"  you change the source files. This is a bug in the respective\n"
"  compilers which do not expose the required dependency\n"
"  information. This has been reported upstream in [this bug]. Until\n"
"  this is fixed you need to be careful when changing your source\n"
"  files.\n"
msgstr ""

#. type: Plain text
#: Gnome-module.md:14
#, no-wrap
msgid "  [this bug]: https://bugzilla.gnome.org/show_bug.cgi?id=745754\n"
msgstr ""

#. type: Plain text
#: Gnome-module.md:16
msgid "## Usage"
msgstr "## 利用方法"

#. type: Plain text
#: Gnome-module.md:21
msgid ""
"To use this module, just do: **`gnome = import('gnome')`**. The following "
"functions will then be available as methods on the object with the name "
"`gnome`. You can, of course, replace the name `gnome` with anything else."
msgstr ""

#. type: Plain text
#: Gnome-module.md:23
msgid "### gnome.compile_resources()"
msgstr ""

#. type: Plain text
#: Gnome-module.md:30
msgid ""
"This function compiles resources specified in an XML file into code that can "
"be embedded inside the main binary. Similar a build target it takes two "
"positional arguments. The first one is the name of the resource and the "
"second is the XML file containing the resource definitions. If the name is "
"`foobar`, Meson will generate a header file called `foobar.h`, which you can "
"then include in your sources."
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:45
msgid ""
"`c_name`: passed to the resource compiler as an argument after `--c-name`"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:45
msgid "`dependencies`: extra targets to depend upon for building"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:45
msgid ""
"`export`: (*Added 0.37.0*) if true, export the symbols of the generated "
"sources"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:45
msgid "`extra_args`: extra command line arguments to pass to the resource"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:45
msgid ""
"`gresource_bundle`: (*Added 0.37.0*) if true, output a `.gresource` file "
"instead of source"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:45
msgid "`install`: (*Added 0.37.0*) if true, install the gresource file"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:45
msgid ""
"`install_dir`: (*Added 0.37.0*) location to install the header or bundle "
"depending on previous options"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:45
msgid "`install_header`: (*Added 0.37.0*) if true, install the header file"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:45
msgid ""
"`source_dir`: a list of subdirectories where the resource compiler should "
"look up the files, relative to the location of the XML file"
msgstr ""

#. type: Plain text
#: Gnome-module.md:48
msgid ""
"Returns an array containing: `[c_source, header_file]` or "
"`[gresource_bundle]`"
msgstr ""

#. type: Plain text
#: Gnome-module.md:50
msgid "### gnome.generate_gir()"
msgstr ""

#. type: Plain text
#: Gnome-module.md:55
msgid ""
"Generates GObject introspection data. Takes one positional argument, the "
"build target you want to build gir data for. There are several keyword "
"arguments. Many of these map directly to the `g-ir-scanner` tool so see its "
"documentation for more information."
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid "`dependencies`: deps to use during introspection scanning"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid "`extra_args`: command line arguments to pass to gir compiler"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid "`export_packages`: extra packages the gir file exports"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid "`sources`: the list of sources to be scanned for gir data"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid "`nsversion`: namespace version"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid ""
"`namespace`: the namespace for this gir object which determines output files"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid ""
"`identifier_prefix`: the identifier prefix for the gir object, e.g. `Gtk`"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid "`includes`: list of gir names to be included, can also be a GirTarget"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid ""
"`header`: *(Added 0.43.0)* name of main c header to include for the library, "
"e.g. `glib.h`"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid "`include_directories`: extra include paths to look for gir files"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid "`install`: if true, install the generated files"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid ""
"`install_dir_gir`: (*Added 0.35.0*) which directory to install the gir file "
"into"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid ""
"`install_dir_typelib`: (*Added 0.35.0*) which directory to install the "
"typelib file into"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid "`link_with`: list of libraries to link with"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:77
msgid ""
"`symbol_prefix`: the symbol prefix for the gir object, e.g. `gtk`, (*Since "
"0.43.0*) an ordered list of multiple prefixes is allowed"
msgstr ""

#. type: Plain text
#: Gnome-module.md:80
msgid ""
"Returns an array of two elements which are: `[gir_target, typelib_target]`"
msgstr ""

#. type: Plain text
#: Gnome-module.md:82
msgid "### gnome.genmarshal()"
msgstr ""

#. type: Plain text
#: Gnome-module.md:85
msgid ""
"Generates a marshal file using the `glib-genmarshal` tool. The first "
"argument is the basename of the output files."
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:99
msgid ""
"`extra_args`: (*Added 0.42.0*) additional command line arguments to pass"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:99 Gnome-module.md:138 Gnome-module.md:170
msgid "`install_header`: if true, install the generated header"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:99
msgid "`install_dir`: directory to install header to"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:99
msgid "`nostdinc`: if true, don't include the standard marshallers from glib"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:99
msgid ""
"`internal`: if true, mark generated sources as internal to `glib-genmarshal` "
"(*Requires GLib 2.54*)"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:99
msgid "`prefix`: the prefix to use for symbols"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:99
msgid "`skip_source`: if true, skip source location comments"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:99
msgid "`stdinc`: if true, include the standard marshallers from glib"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:99
msgid "`sources`: the list of sources to use as inputs"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:99
msgid "`valist_marshallers`: if true, generate va_list marshallers"
msgstr ""

#. type: Plain text
#: Gnome-module.md:101 Gnome-module.md:140
#, no-wrap
msgid "*Added 0.35.0*\n"
msgstr ""

#. type: Plain text
#: Gnome-module.md:103 Gnome-module.md:142 Gnome-module.md:192
msgid "Returns an array of two elements which are: `[c_source, header_file]`"
msgstr ""

#. type: Plain text
#: Gnome-module.md:105
msgid "### gnome.mkenums()"
msgstr ""

#. type: Plain text
#: Gnome-module.md:108
msgid ""
"Generates enum files for GObject using the `glib-mkenums` tool. The first "
"argument is the base name of the output files."
msgstr ""

#. type: Plain text
#: Gnome-module.md:111
msgid ""
"This method is essentially a wrapper around the `glib-mkenums` tool's "
"command line API. It is the most featureful method for enum creation."
msgstr ""

#. type: Plain text
#: Gnome-module.md:114
msgid ""
"Typically you either provide template files or you specify the various "
"template sections manually as strings."
msgstr ""

#. type: Plain text
#: Gnome-module.md:118
msgid ""
"Most libraries and applications will be using the same standard template "
"with only minor tweaks, in which case the `gnome.mkenums_simple()` "
"convenience method can be used instead."
msgstr ""

#. type: Plain text
#: Gnome-module.md:123
msgid ""
"Note that if you `#include` the generated header in any of the sources for a "
"build target, you must add the generated header to the build target's list "
"of sources to codify the dependency. This is true for all generated sources, "
"not just `mkenums`."
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:138
msgid "`c_template`: template to use for generating the source"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:138
msgid "`comments`: comment passed to the command"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:138
msgid "`h_template`: template to use for generating the header"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:138 Gnome-module.md:170
msgid "`identifier_prefix`: prefix to use for the identifiers"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:138 Gnome-module.md:170
msgid "`install_dir`: directory to install the header"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:138 Gnome-module.md:170
msgid "`sources`: the list of sources to make enums with"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:138 Gnome-module.md:170
msgid "`symbol_prefix`: prefix to use for the symbols"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:138
msgid "`eprod`: enum text"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:138
msgid "`fhead`: file header"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:138
msgid "`fprod`: file text"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:138
msgid "`ftail`: file tail"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:138
msgid "`vhead`: value text"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:138
msgid "`vtail`: value tail"
msgstr ""

#. type: Plain text
#: Gnome-module.md:144
msgid "### gnome.mkenums_simple()"
msgstr ""

#. type: Plain text
#: Gnome-module.md:149
msgid ""
"Generates enum `.c` and `.h` files for GObject using the `glib-mkenums` tool "
"with the standard template used by most GObject-based C libraries. The first "
"argument is the base name of the output files."
msgstr ""

#. type: Plain text
#: Gnome-module.md:154
msgid ""
"Note that if you `#include` the generated header in any of the sources for a "
"build target, you must add the generated header to the build target's list "
"of sources to codify the dependency. This is true for all generated sources, "
"not just `mkenums_simple`."
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:170
msgid ""
"`body_prefix`: additional prefix at the top of the body file, e.g. for extra "
"includes"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:170
msgid ""
"`decorator`: optional decorator for the function declarations, e.g. "
"`GTK_AVAILABLE` or `GST_EXPORT`"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:170
msgid ""
"`function_prefix`: additional prefix for function names, e.g. in case you "
"want to add a leading underscore to functions used only internally"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:170
msgid ""
"`header_prefix`: additional prefix at the top of the header file, e.g. for "
"extra includes (which may be needed if you specify a decorator for the "
"function declarations)"
msgstr ""

#. type: Plain text
#: Gnome-module.md:172 Gnome-module.md:215
msgid "Example:"
msgstr ""

#. type: Plain text
#: Gnome-module.md:175 Gnome-module.md:218
msgid "```meson gnome = import('gnome')"
msgstr ""

#. type: Plain text
#: Gnome-module.md:178
msgid ""
"my_headers = ['myheader1.h', 'myheader2.h'] my_sources = ['mysource1.c', "
"'mysource2.c']"
msgstr ""

#. type: Plain text
#: Gnome-module.md:181
msgid ""
"# will generate myenums.c and myenums.h based on enums in myheader1.h and "
"myheader2.h enums = gnome.mkenums_simple('myenums', sources : my_headers)"
msgstr ""

#. type: Plain text
#: Gnome-module.md:188
#, no-wrap
msgid ""
"mylib = library('my', my_sources, enums,\n"
"                include_directories: my_incs,\n"
"                dependencies: my_deps,\n"
"                c_args: my_cargs,\n"
"                install: true)\n"
"```\n"
msgstr ""

#. type: Plain text
#: Gnome-module.md:190
#, no-wrap
msgid "*Added 0.42.0*\n"
msgstr ""

#. type: Plain text
#: Gnome-module.md:194
msgid "### gnome.compile_schemas()"
msgstr ""

#. type: Plain text
#: Gnome-module.md:198
msgid ""
"When called, this method will compile the gschemas in the current directory. "
"Note that this is not for installing schemas and is only useful when running "
"the application locally for example during tests."
msgstr ""

#. type: Plain text
#: Gnome-module.md:200
msgid "### gnome.gdbus_codegen()"
msgstr ""

#. type: Plain text
#: Gnome-module.md:204
msgid ""
"Compiles the given XML schema into gdbus source code. Takes two positional "
"arguments, the first one specifies the name of the source files and the "
"second specifies the XML file name."
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:210
msgid "`interface_prefix`: prefix for the interface"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:210
msgid "`namespace`: namespace of the interface"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:210
msgid ""
"`object_manager`: *(Added 0.40.0)* if true generates object manager code"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:210
msgid ""
"`annotations`: *(Added 0.43.0)* list of lists of 3 strings for the "
"annotation for `'ELEMENT', 'KEY', 'VALUE'`"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:210
msgid ""
"`docbook`: *(Added 0.43.0)* prefix to generate `'PREFIX'-NAME.xml` docbooks"
msgstr ""

#. type: Plain text
#: Gnome-module.md:213
msgid ""
"Returns an opaque object containing the source files. Add it to a top level "
"target's source list."
msgstr ""

#. type: Plain text
#: Gnome-module.md:229
#, no-wrap
msgid ""
"# The returned source would be passed to another target\n"
"gdbus_src = gnome.gdbus_codegen('example-interface', 'com.example.Sample.xml',\n"
"  interface_prefix : 'com.example.',\n"
"  namespace : 'Sample',\n"
"  annotations : [\n"
"    ['com.example.Hello()', 'org.freedesktop.DBus.Deprecated', 'true']\n"
"  ],\n"
"  docbook : 'example-interface-doc'\n"
")\n"
"```\n"
msgstr ""

#. type: Plain text
#: Gnome-module.md:231
msgid "### gnome.generate_vapi()"
msgstr ""

#. type: Plain text
#: Gnome-module.md:234
msgid ""
"Creates a VAPI file from gir. The first argument is the name of the library."
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:242
msgid "`gir_dirs`: extra directories to include for gir files"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:242
msgid "`install`: if true, install the VAPI file"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:242
msgid ""
"`install_dir`: location to install the VAPI file (defaults to datadir/vala/"
"vapi)"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:242
msgid "`metadata_dirs`: extra directories to include for metadata files"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:242
msgid "`packages`: VAPI packages that are depended upon"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:242
msgid "`sources`: the gir source to generate the VAPI from"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:242
msgid "`vapi_dirs`: extra directories to include for VAPI files"
msgstr ""

#. type: Plain text
#: Gnome-module.md:245
msgid ""
"Returns a custom dependency that can be included when building other VAPI or "
"Vala binaries."
msgstr ""

#. type: Plain text
#: Gnome-module.md:247 Gnome-module.md:265
#, no-wrap
msgid "*Added 0.36.0*\n"
msgstr ""

#. type: Plain text
#: Gnome-module.md:249
msgid "### gnome.yelp()"
msgstr ""

#. type: Plain text
#: Gnome-module.md:252
msgid ""
"Installs help documentation using Yelp. The first argument is the project id."
msgstr ""

#. type: Plain text
#: Gnome-module.md:255
msgid ""
"This also creates two targets for translations `help-$project-update-po` and "
"`help-$project-pot`."
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:260
msgid "`languages`: list of languages for translations"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:260
msgid "`media`: list of media such as images"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:260
msgid "`sources`: list of pages"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:260
msgid ""
"`symlink_media`: if media should be symlinked not copied (defaults to `true` "
"since 0.42.0)"
msgstr ""

#. type: Plain text
#: Gnome-module.md:263
msgid ""
"Note that very old versions of yelp may not support symlinked media; At "
"least 3.10 should work."
msgstr ""

#. type: Plain text
#: Gnome-module.md:267
msgid "### gnome.gtkdoc()"
msgstr ""

#. type: Plain text
#: Gnome-module.md:271
msgid ""
"Compiles and installs gtkdoc documentation into `prefix/share/gtk-doc/html`. "
"Takes one positional argument: The name of the module."
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`content_files`: a list of content files"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`dependencies`: a list of dependencies"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`fixxref_args`: a list of arguments to pass to `gtkdoc-fixxref`"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`gobject_typesfile`: a list of type files"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`ignore_headers`: a list of header files to ignore"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`html_assets`: a list of assets for the HTML pages"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`html_args` a list of arguments to pass to `gtkdoc-mkhtml`"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`install`: if true, installs the generated docs"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid ""
"`install_dir`: the directory to install the generated docs relative to the "
"gtk-doc html dir or an absolute path (default: module name)"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`main_xml`: specifies the main XML file"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`main_sgml`: equal to `main_xml`"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`mkdb_args`: a list of arguments to pass to `gtkdoc-mkdb`"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`scan_args`: a list of arguments to pass to `gtkdoc-scan`"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`scanobjs_args`: a list of arguments to pass to `gtkdoc-scangobj`"
msgstr ""

#. type: Bullet: '* '
#: Gnome-module.md:288
msgid "`src_dir`: include_directories to include"
msgstr ""

#. type: Plain text
#: Gnome-module.md:291
msgid ""
"This creates a `$module-doc` target that can be ran to build docs and "
"normally these are only built on install."
msgstr ""

#. type: Plain text
#: Gnome-module.md:293
msgid "### gnome.gtkdoc_html_dir()"
msgstr ""

#. type: Plain text
#: Gnome-module.md:297
msgid ""
"Takes as argument a module name and returns the path where that module's "
"HTML files will be installed. Usually used with `install_data` to install "
"extra files, such as images, to the output directory."
msgstr ""
