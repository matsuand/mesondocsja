# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-11-27 13:08+0900\n"
"PO-Revision-Date: 2017-09-30 21:44+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Subprojects.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Subprojects.md:4
msgid ""
"short-description: Using meson projects as subprojects within other meson "
"projects ..."
msgstr ""
"short-description: 他の Meson プロジェクト内にサブプロジェクトとして利用す"
"る\n"
"..."

#. type: Plain text
#: Subprojects.md:6
msgid "# Subprojects"
msgstr "# サブプロジェクト"

#. type: Plain text
#: Subprojects.md:12
msgid ""
"Some platforms do not provide a native packaging system. In these cases it "
"is common to bundle all third party libraries in your source tree. This is "
"usually frowned upon because it makes it hard to add these kinds of projects "
"into e.g. those Linux distributions that forbid bundled libraries."
msgstr ""

#. type: Plain text
#: Subprojects.md:19
msgid ""
"Meson tries to solve this problem by making it extremely easy to provide "
"both at the same time. The way this is done is that Meson allows you to take "
"any other Meson project and make it a part of your build without (in the "
"best case) any changes to its Meson setup. It becomes a transparent part of "
"the project. The basic idiom goes something like this."
msgstr ""

#. type: Plain text
#: Subprojects.md:23
#, fuzzy
msgid ""
"```meson dep = dependency('foo', fallback : [subproject_name, variable_name] "
"```"
msgstr ""
"```meson\n"
"sp_dep = dependency('subproj_pkgconfig_name', fallback : ['subproj_name', "
"'proj_dep']) \n"
"```"

#. type: Plain text
#: Subprojects.md:26
msgid ""
"As an example, suppose we have a simple project that provides a shared "
"library. It would be set up like this."
msgstr ""

#. type: Plain text
#: Subprojects.md:34
#, fuzzy, no-wrap
msgid ""
"```meson\n"
"project('simple', 'c')\n"
"i = include_directories('include')\n"
"l = shared_library('simple', 'simple.c', include_directories : i, install : true)\n"
"simple_dep = declare_dependency(include_directories : i,\n"
"  link_with : l)\n"
"```\n"
msgstr ""
"```meson\n"
"project('simple', 'c') \n"
"i = include_directories('include') \n"
"l = shared_library('simple', 'simple.c', include_directories : i, install : true) \n"
"```"

#. type: Plain text
#: Subprojects.md:40
msgid ""
"Then we could use that from a master project. First we generate a "
"subdirectory called `subprojects` in the root of the master directory. Then "
"we create a subdirectory called `simple` and put the subproject in that "
"directory. Now the subproject can be used like this."
msgstr ""

#. type: Plain text
#: Subprojects.md:47
#, no-wrap
msgid ""
"```meson\n"
"project('master', 'c')\n"
"dep = dependency('simple', fallback : ['simple', 'simple_dep']\n"
"exe = executable('prog', 'prog.c',\n"
"                 dependencies : dep, install : true)\n"
"```\n"
msgstr ""

#. type: Plain text
#: Subprojects.md:51
msgid ""
"With this setup the system dependency is used when it is available, "
"otherwise we fall back on the bundled version. If you wish to always use the "
"embedded version, then you would declare it like this:"
msgstr ""

#. type: Plain text
#: Subprojects.md:56
msgid ""
"```meson simple_sp = subproject('simple')  dep = simple_sp."
"get_variable('simple_dep')  ```"
msgstr ""

#. type: Plain text
#: Subprojects.md:64
msgid ""
"All Meson features of the subproject, such as project options keep working "
"and can be set in the master project. There are a few limitations, the most "
"important being that global compiler arguments must be set in the main "
"project before calling subproject. Subprojects must not set global arguments "
"because there is no way to do that reliably over multiple subprojects. To "
"check whether you are running as a subproject, use the `is_subproject` "
"function."
msgstr ""

#. type: Plain text
#: Subprojects.md:69
msgid ""
"It should be noted that this only works for subprojects that are built with "
"Meson. It can not be used with any other build system. The reason is the "
"simple fact that there is no possible way to do this reliably with mixed "
"build systems."
msgstr ""

#. type: Plain text
#: Subprojects.md:74
msgid ""
"Subprojects can use other subprojects, but all subprojects must reside in "
"the top level `subprojects` directory. Recursive use of subprojects is not "
"allowed, though, so you can't have subproject `a` that uses subproject `b` "
"and have `b` also use `a`."
msgstr ""

#. type: Plain text
#: Subprojects.md:76
msgid "# Obtaining subprojects"
msgstr ""

#. type: Plain text
#: Subprojects.md:79
msgid ""
"Meson ships with a dependency system to automatically obtain dependency "
"subprojects. It is documented in the [Wrap dependency system manual](Wrap-"
"dependency-system-manual.md)."
msgstr ""
