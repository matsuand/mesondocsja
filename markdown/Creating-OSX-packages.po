# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-09-30 21:43+0900\n"
"PO-Revision-Date: 2017-09-30 21:43+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Creating-OSX-packages.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:4
msgid "short-description: Tools to create OS X packages ..."
msgstr "short-description: Tools to create OS X packages\n..."

#. type: Plain text
#: Creating-OSX-packages.md:6
msgid "# Creating OSX packages"
msgstr "# OSX パッケージの生成"

#. type: Plain text
#: Creating-OSX-packages.md:12
msgid ""
"Meson does not have native support for building OSX packages but it does "
"provide all the tools you need to create one yourself. The reason for this "
"is that it is a very hard task to write a system that provides for all the "
"different ways to do that but it is very easy to write simple scripts for "
"each application."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:15
msgid ""
"Sample code for this can be found in [the Meson manual test suite](https://"
"github.com/jpakkane/meson/tree/master/manual%20tests/4%20standalone"
"%20binaries)."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:17
msgid "## Creating an app bundle"
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:23
msgid ""
"OSX app bundles are actually extremely simple. They are just a directory of "
"files in a certain format. All the details you need to know are on [this "
"page](https://stackoverflow.com/questions/1596945/building-osx-app-bundle)  "
"and it is highly recommended that you read it first."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:28
msgid ""
"Let's assume that we are creating our app bundle into `/tmp/myapp.app`. "
"Suppose we have one executable, so we need to install that into `Contents/"
"MacOS`. If we define the executable like this:"
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:32
msgid "```meson executable('myapp', 'foo1.c', ..., install : true)  ```"
msgstr "```meson\nexecutable('myapp', 'foo1.c', ..., install : true) \n```"

#. type: Plain text
#: Creating-OSX-packages.md:34
msgid "then we just need to initialize our build tree with this command:"
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:41
#, no-wrap
msgid ""
"```console\n"
"$ meson --prefix=/tmp/myapp.app \\\n"
"        --bindir=Contents/MacOS \\\n"
"        builddir \\\n"
"        <other flags you might need>\n"
"```\n"
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:46
msgid ""
"Now when we do `ninja install` the bundle is properly staged. If you have "
"any resource files or data, you need to install them into `Contents/"
"Resources` either by custom install commands or specifying more install "
"paths to the Meson command."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:49
msgid ""
"Next we need to install an `Info.plist` file and an icon. For those we need "
"the following two Meson definitions."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:54
msgid ""
"```meson install_data('myapp.icns', install_dir : 'Contents/Resources')  "
"install_data('Info.plist', install_dir : 'Contents')  ```"
msgstr ""
"```meson\ninstall_data('myapp.icns', install_dir : 'Contents/Resources') \n"
"install_data('Info.plist', install_dir : 'Contents') \n```"

#. type: Plain text
#: Creating-OSX-packages.md:61
msgid ""
"The format of `Info.plist` can be found in the link or the sample project "
"linked above. Be careful, the sample code on the linked page is malformed, "
"it is missing a less than character (<) before `!DOCTYPE`. The simplest way "
"to get an icon in the `icns` format is to save your image as a tiff an then "
"use the `tiff2icns` helper application that comes with XCode."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:65
msgid ""
"Some applications assume that the working directory of the app process is "
"the same where the binary executable is. If this is the case for you, then "
"you need to create a wrapper script that looks like this:"
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:68
msgid "```bash #!/bin/bash"
msgstr "```bash\n#!/bin/bash"

#. type: Plain text
#: Creating-OSX-packages.md:72
msgid "cd \"${0%/*}\" ./myapp ```"
msgstr "cd \"${0%/*}\" ./myapp\n```"

#. type: Plain text
#: Creating-OSX-packages.md:74
msgid "install it with this:"
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:78
msgid "```meson install_data('myapp.sh', install_dir : 'Contents/MacOS')  ```"
msgstr "```meson\ninstall_data('myapp.sh', install_dir : 'Contents/MacOS') \n```"

#. type: Plain text
#: Creating-OSX-packages.md:81
msgid ""
"and make sure that you specify `myapp.sh` as the executable to run in your "
"`Info.plist`."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:87
msgid ""
"If you are not using any external libraries, this is all you need to do. You "
"now have a full app bundle in `/tmp/myapp.app` that you can use. Most "
"applications use third party frameworks and libraries, though, so you need "
"to add them to the bundle so it will work on other peoples' machines."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:91
msgid ""
"As an example we are going to use the [SDL2](https://libsdl.org/)  "
"framework. In order to bundle it in our app, we first specify an installer "
"script to run."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:95
msgid "```meson meson.add_install_script('install_script.sh')  ```"
msgstr "```meson\nmeson.add_install_script('install_script.sh') \n```"

#. type: Plain text
#: Creating-OSX-packages.md:98
msgid ""
"The install script does two things. First it copies the whole framework into "
"our bundle."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:104
#, no-wrap
msgid ""
"```console\n"
"$ mkdir -p ${MESON_INSTALL_PREFIX}/Contents/Frameworks\n"
"$ cp -R /Library/Frameworks/SDL2.framework \\\n"
"        ${MESON_INSTALL_PREFIX}/Contents/Frameworks\n"
"```\n"
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:109
msgid ""
"Then it needs to alter the library search path of our executable(s). This "
"tells OSX that the libraries your app needs are inside your bundle. In the "
"case of SDL2, the invocation goes like this:"
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:115
#, no-wrap
msgid ""
"```console\n"
"$ install_name_tool -change @rpath/SDL2.framework/Versions/A/SDL2 \\\n"
"    @executable_path/../FrameWorks/SDL2.framework/Versions/A/SDL2 \\\n"
"    ${MESON_INSTALL_PREFIX}/Contents/MacOS/myapp\n"
"```\n"
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:126
msgid ""
"This is the part of OSX app bundling that you must always do manually. OSX "
"dependencies come in many shapes and forms and unfortunately there is no "
"reliable automatic way to determine how each dependency should be handled. "
"Frameworks go to the `Frameworks` directory while plain `.dylib` files "
"usually go to `Contents/Resources/lib` (but you can put them wherever you "
"like). To get this done you have to check what your program links against "
"with `otool -L /path/to/binary` and manually add the copy and fix steps to "
"your install script. Do not copy system libraries inside your bundle, though."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:129
msgid ""
"After this you have a fully working, self-contained OSX app bundle ready for "
"distribution."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:131
msgid "## Creating a .dmg installer"
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:136
msgid ""
"A .dmg installer is similarly quite simple, at its core it is basically a "
"fancy compressed archive. A good description can be found on [this page]"
"(https://el-tramo.be/guides/fancy-dmg/). Please read it and create a "
"template image file according to its instructions."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:142
msgid ""
"The actual process of creating the installer is very simple: you mount the "
"template image, copy your app bundle in it, unmount it and convert the image "
"into a compressed archive. The actual commands to do this are not "
"particularly interesting, feel free to steal them from either the linked "
"page above or from the sample script in Meson's test suite."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:144
msgid "## Putting it all together"
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:149
msgid ""
"There are many ways to put the .dmg installer together and different people "
"will do it in different ways. The linked sample code does it by having two "
"different scripts. This separates the different pieces generating the "
"installer into logical pieces."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:152
msgid ""
"`install_script.sh` only deals with embedding dependencies and fixing the "
"library paths."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:155
msgid ""
"`build_osx_installer.sh` sets up the build with the proper paths, compiles, "
"installs and generates the .dmg package."
msgstr ""

#. type: Plain text
#: Creating-OSX-packages.md:160
msgid ""
"The main reasoning here is that in order to build a complete OSX installer "
"package from source, all you need to do is to cd into the source tree and "
"run `./build_osx_installer.sh`. To build packages on other platforms you "
"would write scripts such as `build_windows_installer.bat` and so on."
msgstr ""
