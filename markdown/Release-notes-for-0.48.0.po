# Japanese translations for PACKAGE package
# Copyright (C) 2018 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-09-23 17:33+0900\n"
"PO-Revision-Date: 2018-09-04 12:03+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Release-notes-for-0.48.0.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:5
msgid "title: Release 0.48 short-description: Release notes for 0.48 ..."
msgstr ""
"title: リリース 0.48\n"
"short-description: リリースノート 0.48\n"
"..."

#. type: Plain text
#: Release-notes-for-0.48.0.md:7
msgid "# New features"
msgstr "# 新機能"

#. type: Plain text
#: Release-notes-for-0.48.0.md:9
msgid "## Toggles for build type, optimization and vcrt type"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:14
msgid ""
"Since the very beginning Meson has provided different project types to use, "
"such as *debug* and *minsize*. There is also a *plain* type that adds "
"nothing by default but instead makes it the user's responsibility to add "
"everything by hand. This works but is a bit tedious."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:20
msgid ""
"In this release we have added new new options to manually toggle e.g. "
"optimization levels and debug info so those can be changed independently of "
"other options. For example by default the debug buildtype has no optmization "
"enabled at all. If you wish to use GCC's `-Og` instead, you could set it "
"with the following command:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:24
msgid "``` meson configure -Doptimization=g ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:29
msgid ""
"Similarly we have added a toggle option to select the version of Visual "
"Studio C runtime to use. By default it uses the debug runtime DLL debug "
"builds and release DLL for release builds but this can be manually changed "
"with the new base option `b_vscrt`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:31
msgid "## Meson warns if two calls to configure_file() write to the same file"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:37
msgid ""
"If two calls to [`configure_file()`](#Reference-manual.md#configure_file)  "
"write to the same file Meson will print a `WARNING:` message during "
"configuration. For example: ```meson project('configure_file', 'cpp')"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:48
#, no-wrap
msgid ""
"configure_file(\n"
"      input: 'a.in',\n"
"      output: 'out',\n"
"      command: ['./foo.sh']\n"
"    )\n"
"configure_file(\n"
"  input: 'a.in',\n"
"  output: 'out',\n"
"  command: ['./foo.sh']\n"
")\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:50
msgid "```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:52
msgid "This will output:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:69
msgid ""
"``` The Meson build system Version: 0.47.0.dev1 Source dir: /path/to/srctree "
"Build dir: /path/to/buildtree Build type: native build Project name: "
"configure_file Project version: undefined Build machine cpu family: x86_64 "
"Build machine cpu: x86_64 Configuring out with command WARNING: Output file "
"out for configure_file overwritten. First time written in line 3 now in line "
"8 Configuring out with command Build targets in project: 0 Found ninja-1.8.2 "
"at /usr/bin/ninja ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:71
msgid "## New kwarg `console` for `custom_target()`"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:79
msgid ""
"This keyword argument conflicts with `capture`, and is meant for commands "
"that are resource-intensive and take a long time to finish. With the Ninja "
"backend, setting this will add this target to [Ninja's `console` pool]"
"(https://ninja-build.org/manual.html#_the_literal_console_literal_pool), "
"which has special properties such as not buffering stdout and serializing "
"all targets in this pool."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:83
msgid ""
"The primary use-case for this is to be able to run external commands that "
"take a long time to exeute. Without setting this, the user does not receive "
"any feedback about what the program is doing."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:85
msgid "## `dependency(version:)` now applies to all dependency types"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:89
msgid ""
"Previously, version constraints were only enforced for dependencies found "
"using the pkg-config dependency provider.  These constraints now apply to "
"dependencies found using any dependency provider."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:94
msgid ""
"Some combinations of dependency, host and method do not currently support "
"discovery of the version.  In these cases, the dependency will not be found "
"if a version constraint is applied, otherwise the `version()` method for the "
"dependency object will return `'unknown'`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:98
msgid ""
"(If discovering the version in one of these combinations is important to "
"you, and a method exists to determine the version in that case, please file "
"an issue with as much information as possible.)"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:100
msgid "## python3 module is deprecated"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:103
msgid ""
"A generic module `python` has been added in Meson `0.46.0` and has a "
"superset of the features implemented by the previous `python3` module."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:109
msgid ""
"In most cases, it is a simple matter of renaming: ```meson py3mod = "
"import('python3')  python = py3mod.find_python()  ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:111
msgid "becomes"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:116
msgid ""
"```meson pymod = import('python')  python = pymod.find_installation()  ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:118
msgid "## Dictionary addition"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:121
msgid ""
"Dictionaries can now be added, values from the second dictionary overrides "
"values from the first"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:127
msgid "```meson d1 = {'a' : 'b'} d3 = d1 + {'a' : 'c'} d3 += {'d' : 'e'} ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:129
msgid "## Dist scripts"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:132
msgid ""
"You can now specify scripts that are run as part of the `dist` target. An "
"example usage would go like this:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:135
msgid "```meson project('foo', 'c')"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:137
msgid "# other stuff here"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:140
msgid "meson.add_dist_script('dist_cleanup.py')  ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:142
msgid "## Fatal warnings"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:147
msgid ""
"A new command line option has been added: `--fatal-meson-warnings`. When "
"enabled, any warning message printed by Meson will be fatal and raise an "
"exception. It is intended to be used by developers and CIs to easily catch "
"deprecation warnings, or any other potential issues."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:149
msgid ""
"## Helper methods added for checking GNU style attributes: __attribute__(...)"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:154
msgid ""
"A set of new helpers have been added to the C and C++ compiler objects for "
"checking GNU style function attributes. These are not just simpler to use, "
"they may be optimized to return fast on compilers that don't support these "
"attributes. Currently this is true for MSVC."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:161
#, no-wrap
msgid ""
"```meson\n"
"cc = meson.get_compiler('c')\n"
"if cc.has_function_attribute('aligned')\n"
"   add_project_arguments('-DHAVE_ALIGNED', language : 'c')\n"
"endif\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:163
msgid "Would replace code like:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:169
#, no-wrap
msgid ""
"```meson\n"
"if cc.compiles('''into foo(void) __attribute__((aligned(32)))''')\n"
"   add_project_arguments('-DHAVE_ALIGNED', language : 'c')\n"
"endif\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:171
msgid "Additionally, a multi argument version has been added:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:177
#, no-wrap
msgid ""
"```meson\n"
"foreach s : cc.get_supported_function_attributes(['hidden', 'alias'])\n"
"   add_project_arguments('-DHAVE_@0@'.format(s.to_upper()), language : 'c')\n"
"endforeach\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:179
msgid "## gnome.generate_gir() now optionally accepts multiple libraries"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:182
msgid ""
"The GNOME module can now generate a single gir for multiple libraries, which "
"is something `g-ir-scanner` supported, but had not been exposed yet."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:185
msgid ""
"gnome.generate_gir() will now accept multiple positional arguments, if none "
"of these arguments are an `Executable` instance."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:187
msgid "## Hotdoc module"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:193
msgid ""
"A new module has been written to ease generation of [hotdoc](https://hotdoc."
"github.io/) based documentation. It supports complex use cases such as "
"hotdoc subprojects (to create documentation portals) and makes it straight "
"forward to leverage full capabilities of hotdoc."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:195
msgid "Simple usage:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:198
msgid "``` meson hotdoc = import('hotdoc')"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:210
#, no-wrap
msgid ""
"hotdoc.generate_doc(\n"
"  'foobar',\n"
"  c_smart_index: true,\n"
"  project_version: '0.1',\n"
"  sitemap: 'sitemap.txt',\n"
"  index: 'index.md',\n"
"  c_sources: ['path/to/file.c'],\n"
"  languages: ['c'],\n"
"  install: true,\n"
")\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:212
msgid ""
"## i18n.merge_file() now fully supports variable substitutions defined in "
"custom_target()"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:217
msgid ""
"Filename substitutions like @BASENAME@ and @PLAINNAME@ were previously "
"accepted but the name of the build target wasn't altered leading to "
"colliding target names when using the substitution twice.  i18n.merge_file() "
"now behaves as custom_target() in this regard."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:219
msgid ""
"## Projects args can be set separately for cross and native builds "
"(potentially breaking change)"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:222
msgid ""
"It has been a longstanding bug (or let's call it a \"delayed bug fix\")  "
"that if yo do this:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:226
msgid "```meson add_project_arguments('-DFOO', language : 'c')  ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:233
msgid ""
"Then the flag is used both in native and cross compilations. This is very "
"confusing and almost never what you want. To fix this a new keyword `native` "
"has been added to all functions that add arguments, namely "
"`add_global_arguments`, `add_global_link_arguments`, `add_project_arguments` "
"and `add_project_link_arguments` that behaves like the following:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:238
msgid ""
"``` ## Added to native builds when compiling natively and to cross ## "
"compilations when doing cross compiles.  add_project_arguments(...)"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:241
msgid ""
"## Added only to native compilations, not used in cross compilations.  "
"add_project_arguments(..., native : true)"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:245
msgid ""
"## Added only to cross compilations, not used in native compilations.  "
"add_project_arguments(..., native : false)  ```"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:249
msgid ""
"Also remember that cross compilation is a property of each target. There can "
"be target that are compiled with the native compiler and some which are "
"compiled with the cross compiler."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:252
msgid ""
"Unfortunately this change is backwards incompatible and may cause some "
"projects to fail building. However this should be very rare in practice."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:254
msgid "## More flexible `override_find_program()`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:258
msgid ""
"It is now possible to pass an `executable` to `override_find_program()` if "
"the overridden program is not used during configure."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:261
msgid ""
"This is particularly useful for fallback dependencies like Protobuf that "
"also provide a tool like protoc."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:263
msgid ""
"## `shared_library()` now supports setting dylib compatibility and current "
"version"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:266
msgid ""
"Now, by default `shared_library()` sets `-compatibility_version` and `-"
"current_version` of a macOS dylib using the `soversion`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:271
msgid ""
"This can be overriden by using the `darwin_versions:` kwarg to "
"[`shared_library()`](Reference-manual.md#shared_library). As usual, you can "
"also pass this kwarg to `library()` or `build_target()` and it will be used "
"in the appropriate circumstances."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:273
msgid "## Version comparison"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:277
msgid ""
"`dependency(version:)` and other version constraints now handle versions "
"containing non-numeric characters better, comparing versions using the "
"rpmvercmp algorithm (as using the `pkg-config` autoconf macro "
"`PKG_CHECK_MODULES` does)."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:281
msgid ""
"This is a breaking change for exact comparison constraints which rely on the "
"previous comparison behaviour of extending the compared versions with `'0'` "
"elements, up to the same length of `'.'`-separated elements."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:284
msgid ""
"For example, a version of `'0.11.0'` would previously match a version "
"constraint of `'==0.11'`, but no longer does, being instead considered "
"strictly greater."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:287
msgid ""
"Instead, use a version constraint which exactly compares with the precise "
"version required, e.g. `'==0.11.0'`."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:289
msgid "## Keyword argument for GNU symbol visibility"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:293
msgid ""
"Build targets got a new keyword, `gnu_symbol_visibility` that controls how "
"symbols are exported from shared libraries. This is most commonly used to "
"hide implementation symbols like this:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:298
#, no-wrap
msgid ""
"```meson\n"
"shared_library('mylib', ...\n"
"  gnu_symbol_visibility: 'hidden')\n"
"```\n"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:301
msgid ""
"In this case only symbols explicitly marked as visible in the source files "
"get exported."
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:303
msgid "## Git wraps can now clone submodules automatically"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:305
msgid "To enable this, the following needs to be added to the `.wrap` file:"
msgstr ""

#. type: Plain text
#: Release-notes-for-0.48.0.md:308
msgid "```ini clone-recursive=true ```"
msgstr ""
