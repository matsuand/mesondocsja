# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-09-30 21:44+0900\n"
"PO-Revision-Date: 2017-09-30 21:44+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: Unity-builds.md:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: Unity-builds.md:4
msgid ""
"short-description: Unity builds are a technique for reducing build times ..."
msgstr ""
"short-description: Unity builds are a technique for reducing build times\n..."

#. type: Plain text
#: Unity-builds.md:6
msgid "# Unity builds"
msgstr "# Unity builds"

#. type: Plain text
#: Unity-builds.md:8
msgid ""
"Unity builds are a technique for cutting down build times. The way it works "
"is relatively straightforward. Suppose we have source files `src1.c`, `src2."
"c` and `src3.c`. Normally we would run the compiler three times, once for "
"each file. In a unity build we instead compile all these sources in a single "
"unit. The simplest approach is to create a new source file that looks like "
"this."
msgstr ""

#. type: Plain text
#: Unity-builds.md:14
msgid "```c #include<src1.c> #include<src2.c> #include<src3.c> ```"
msgstr "```c\n#include<src1.c>\n#include<src2.c>\n#include<src3.c>\n```"

#. type: Plain text
#: Unity-builds.md:16
msgid ""
"This is then compiled rather than the individual files. The exact speedup "
"depends on the code base, of course, but it is not uncommon to obtain more "
"than 50% speedup in compile times. This happens even though the Unity build "
"uses only one CPU whereas individual compiles can be run in parallel. Unity "
"builds can also lead to faster code, because the compiler can do more "
"aggressive optimizations (e.g. inlining)."
msgstr ""

#. type: Plain text
#: Unity-builds.md:18
msgid ""
"The downside is that incremental builds are as slow as full rebuilds "
"(because that is what they are). Unity compiles also use more memory, which "
"may become an issue in certain scenarios. There may also be some bugs in the "
"source that need to be fixed before Unity compiles work. As an example, if "
"both `src1.c` and `src2.c` contain a static function or variable of the same "
"name, there will be a clash."
msgstr ""

#. type: Plain text
#: Unity-builds.md:19
msgid ""
"Meson has built-in support for unity builds. To enable them, just pass `--"
"unity on` on the command line or enable unity builds with the GUI. No code "
"changes are necessary apart from the potential clash issue discussed above. "
"Meson will automatically generate all the necessary inclusion files for you."
msgstr ""
